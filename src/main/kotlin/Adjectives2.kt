import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.config.Config
import com.github.kotlintelegrambot.dispatcher.initializeUserBlockStates
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.keyboards.Keyboards
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.CellType
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Sheet
import org.apache.poi.xssf.usermodel.XSSFColor
import org.apache.poi.xssf.usermodel.XSSFFont
import org.apache.poi.xssf.usermodel.XSSFRichTextString
import java.io.File
import kotlin.collections.joinToString
import kotlin.collections.map
import kotlin.collections.set
import kotlin.experimental.and

object Adjectives2 {

    fun callAdjective2(chatId: Long, bot: Bot, callbackQueryId: String) {
        println("Adjectives2 callAdjective2: –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–ª–æ–∫ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 2 –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
        println("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö ${Globals.userAdjectiveCompleted[chatId]} !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        initializeUserBlockStates(chatId, Config.TABLE_FILE)
        println("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö ${Globals.userAdjectiveCompleted[chatId]} !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        val blocksCompleted = Globals.userAdjectiveCompleted[chatId]
        if (blocksCompleted == null || !(blocksCompleted.first)) {
            Config.sendIncompleteBlocksAlert(bot, callbackQueryId)
            return
        }
        println("main initializeUserBlockStates —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${Globals.userBlockCompleted[chatId]}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        Globals.userBlocks[chatId] = 6
        Globals.userStates.remove(chatId)
        Globals.userPadezh.remove(chatId)
        Globals.userColumnOrder.remove(chatId)
        handleBlockAdjective2(chatId, bot)
    }

    fun handleBlockAdjective2(chatId: Long, bot: Bot, keepState: Boolean = false) {
        println("Adjectives2 handleBlockAdjective2: –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 2.")
        initializeReplacementsIfNeeded(chatId)

        val allRanges = Config.ADJECTIVE_RANGES_2

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑
        if (Globals.userColumnOrder[chatId] == null) {
            val shuffled = allRanges.indices.shuffled().map { it.toString() }.toMutableList()
            Globals.userColumnOrder[chatId] = shuffled
            println("üîÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: $shuffled")
        }

        val randomizedOrder = Globals.userColumnOrder[chatId]!!
        val currentState = Globals.userStates[chatId] ?: 0

        // –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ keepState == true
        if (!keepState) {
            Globals.userStates[chatId] = currentState
        }

        println("üìç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $currentState, –ø–æ—Ä—è–¥–æ–∫: $randomizedOrder")

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if (currentState >= randomizedOrder.size) {
            println("‚úÖ –í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø—Ä–æ–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –±–ª–æ–∫.")
            Globals.userReplacements.remove(chatId)
            return
        }

        val rangeIndex = randomizedOrder[currentState].toIntOrNull()
        if (rangeIndex == null || rangeIndex !in allRanges.indices) {
            println("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å $rangeIndex –¥–ª—è ranges[${allRanges.size}]")
            Globals.userReplacements.remove(chatId)
            return
        }

        val currentRange = allRanges[rangeIndex]
        println("üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: $currentRange")

        Globals.currentSheetName[chatId] = "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2"
        Globals.currentRange[chatId] = currentRange

        val messageText = prepareAdjectiveMessage(chatId, bot, currentRange)
        if (messageText == null) {
            println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        }

        val isLastRange = currentState == randomizedOrder.size - 1
        sendAdjectiveBlockMessage(chatId, bot, messageText, isLastRange)
    }



    fun callChangeWordsAdjective2(chatId: Long, bot: Bot) {
        println("Adjectives2 callChangeWordsAdjective2: –°–º–µ–Ω–∞ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤ –±–µ–∑ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        Globals.userReplacements.remove(chatId)
        Globals.sheetColumnPairs.remove(chatId)
        initializeSheetColumnPairsFromFile(chatId)
        handleBlockAdjective2(chatId, bot, keepState = true)
    }


    private fun initializeReplacementsIfNeeded(chatId: Long) {
        println("Adjectives2 initializeReplacementsIfNeeded: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–º–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        if (Globals.userReplacements[chatId].isNullOrEmpty()) {
            initializeSheetColumnPairsFromFile(chatId)
        }
    }

    private fun prepareAdjectiveMessage(chatId: Long, bot: Bot, currentRange: String): String? {
        println("Adjectives2 prepareAdjectiveMessage: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∏–Ω–∏-–±–ª–æ–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.")
        return try {
            generateAdjectiveMessage(Config.TABLE_FILE, "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2", currentRange, Globals.userReplacements[chatId]!!)
        } catch (e: Exception) {
            bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            null
        }
    }

    private fun sendAdjectiveBlockMessage(chatId: Long, bot: Bot, messageText: String, isLastRange: Boolean) {
        println("Adjectives2 sendAdjectiveBlockMessage: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–î–∞–ª–µ–µ' –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.")

        val replyMarkup = if (isLastRange) {
            markAdjective2AsCompleted(chatId, Config.TABLE_FILE)
            Keyboards.adjective2HintToggleKeyboard(isHintVisible = false, isLast = true)
        } else {
            Keyboards.adjective2HintToggleKeyboard(isHintVisible = false, isLast = false)
        }

        GlobalScope.launch {
            TelegramMessageService.updateOrSendMessageWithoutMarkdown(
                chatId = chatId,
                text = messageText,
                replyMarkup = replyMarkup
            )
        }
    }




    fun generateReplacements(chatId: Long) {
        println("Adjectives2 generateReplacements: –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä.")
        val userPairs = Globals.sheetColumnPairs[chatId] ?: run {
            return
        }
        val keysList = userPairs.keys.toList()
        if (keysList.size < 9) {
            println("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã.")
        }
        val replacements = mutableMapOf<Int, String>()
        keysList.take(9).forEachIndexed { index, key ->
            replacements[index + 1] = key
        }
        Globals.userReplacements[chatId] = replacements
    }

    fun generateAdjectiveMessage(
        filePath: String,
        sheetName: String,
        range: String,
        replacements: Map<Int, String>,
        showHint: Boolean = false
    ): String {
        println("Adjectives2 generateAdjectiveMessage: –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å –∑–∞–º–µ–Ω–æ–π —Ü–∏—Ñ—Ä.")

        val sheetPairs = Globals.sheetColumnPairs.values.firstOrNull() ?: emptyMap()  // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, –µ—Å–ª–∏ chatId –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
        val rawText = generateMessageFromRange(
            filePath = filePath,
            sheetName = sheetName,
            range = range,
            wordUz = null,
            wordRus = null,
            showHint = showHint,
            replacements = replacements,
            sheetColumnPairs = sheetPairs
        )

        val processedText = rawText.replace(Regex("[1-9]")) { match ->
            val digit = match.value.toInt()
            replacements[digit] ?: match.value
        }

        return processedText
    }



//    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
//    fun sendFinalButtonsForAdjectives(chatId: Long, bot: Bot) {
//        println("Adjectives2 sendFinalButtonsForAdjectives: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö.")
//        val currentBlock = Globals.userBlocks[chatId] ?: 5  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 (–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 1)
////        val changeWordsCallback = if (currentBlock == 5) "change_words_adjective1" else "change_words_adjective2"
////
////        val navigationButton = if (currentBlock == 5) {
////            InlineKeyboardButton.CallbackData("–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫", "block:adjective2")
////        } else {
////            InlineKeyboardButton.CallbackData("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫", "block:adjective1")
////        }
//        GlobalScope.launch {
//            TelegramMessageService.updateOrSendMessageWithoutMarkdown(
//                chatId = chatId,
//                text = "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
//                replyMarkup = Keyboards.finalAdjectiveButtons(Globals.userBlocks[chatId] ?: 5)
//            )
//        }
//    }

    fun generateMessageFromRange(
        filePath: String,
        sheetName: String,
        range: String,
        wordUz: String?,
        wordRus: String?,
        showHint: Boolean = false,
        replacements: Map<Int, String>,
        sheetColumnPairs: Map<String, String>
    ): String {
        val file = File(filePath)
        if (!file.exists()) {
            throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        val excelManager = ExcelManager(filePath)
        val result = excelManager.useWorkbook { workbook ->
            val sheet = workbook.getSheet(sheetName)
                ?: throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
            val cells = extractCellsFromRange(sheet, range, wordUz)
            val firstCell = cells.firstOrNull() ?: ""
            val messageBody = cells.drop(1).joinToString("\n")
            listOf(firstCell, messageBody).filter { it.isNotBlank() }.joinToString("\n\n")
        }

        val finalText = if (showHint) {
            result.replace("\$\$", "")
        } else {
            val hintBlock = buildReplacementPairsBlock(replacements, sheetColumnPairs)
            result.replace(Regex("""\$\$.*?\$\$""", RegexOption.DOT_MATCHES_ALL), hintBlock)
        }

        return finalText
    }


    private fun buildReplacementPairsBlock(
        replacements: Map<Int, String>,
        sheetColumnPairs: Map<String, String>
    ): String {
        val pairs = replacements.entries.mapNotNull { (_, uzWord) ->
            val rusWord = sheetColumnPairs[uzWord]
            if (rusWord != null) "$rusWord ‚Äì $uzWord" else null
        }
        return if (pairs.isNotEmpty()) pairs.joinToString("\n") else "*"
    }



//    fun String.escapeMarkdownV2(): String {
//        println("Adjectives1 String.escapeMarkdownV2: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown V2 –≤ —Å—Ç—Ä–æ–∫–µ.")
//        val escaped = this.replace("\\", "\\\\")
//            .replace("_", "\\_")
//            .replace("*", "\\*")
//            .replace("[", "\\[")
//            .replace("]", "\\]")
//            .replace("(", "\\(")
//            .replace(")", "\\)")
//            .replace("~", "\\~")
//            .replace("`", "\\`")
//            .replace(">", "\\>")
//            .replace("#", "\\#")
//            .replace("+", "\\+")
//            .replace("-", "\\-")
//            .replace("=", "\\=")
//            .replace("|", "\\|")
//            .replace("{", "\\{")
//            .replace("}", "\\}")
//            .replace(".", "\\.")
//            .replace("!", "\\!")
//        return escaped
//    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–±–µ–∫—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
    fun adjustWordUz(content: String, wordUz: String?): String {
        println("Adjectives2 adjustWordUz: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∑–±–µ–∫—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∑–∞–º–µ–Ω—è—è —Å–∏–º–≤–æ–ª—ã '+' –∏ '*' –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º.")
        fun Char.isVowel() = this.lowercaseChar() in "aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è"
        val result = buildString {
            var i = 0
            while (i < content.length) {
                val char = content[i]
                when {
                    char == '+' && i + 1 < content.length -> {
                        val nextChar = content[i + 1]
                        val lastChar = wordUz?.lastOrNull()
                        val replacement = when {
                            lastChar != null && lastChar.isVowel() && nextChar.isVowel() -> "s"
                            lastChar != null && !lastChar.isVowel() && !nextChar.isVowel() -> "i"
                            else -> ""
                        }
                        append(replacement)
                        append(nextChar)
                        i++
                    }
                    char == '*' -> append(wordUz)
                    else -> append(char)
                }
                i++
            }
        }
        return result
    }

    fun getRangeIndices(range: String): Pair<Int, Int> {
        println("Adjectives2 getRangeIndices: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–æ–∫–∏.")
        val parts = range.split("-")
        if (parts.size != 2) {
            throw IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞: $range")
        }
        val start = parts[0].replace(Regex("[A-Z]"), "").toInt() - 1
        val end = parts[1].replace(Regex("[A-Z]"), "").toInt() - 1
        return start to end
    }

    fun processRowForRange(row: Row, column: Int, wordUz: String?): String? {
        println("Adjectives2 processRowForRange: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ Excel –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ.")
        val cell = row.getCell(column)
        return cell?.let { processCellContent(it, wordUz) }
    }

    fun extractCellsFromRange(sheet: Sheet, range: String, wordUz: String?): List<String> {
        println("Adjectives2 extractCellsFromRange: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —è—á–µ–π–∫–∏ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel.")
        val (start, end) = getRangeIndices(range)
        val column = range[0] - 'A'
        return (start..end).mapNotNull { rowIndex ->
            val row = sheet.getRow(rowIndex)
            if (row == null) {
                null
            } else {
                val processed = processRowForRange(row, column, wordUz)
                processed
            }
        }.also { cells ->
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏
    fun processCellContent(cell: Cell?, wordUz: String?): String {
        println("Adjectives2 processCellContent: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        if (cell == null) {
            return ""
        }
        val richText = cell.richStringCellValue as XSSFRichTextString
        val text = richText.string
        val runs = richText.numFormattingRuns()
        val result = if (runs == 0) {
            processCellWithoutRuns(cell, text, wordUz)
        } else {
            processFormattedRuns(richText, text, wordUz)
        }
        return result
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
    fun processCellWithoutRuns(cell: Cell, text: String, wordUz: String?): String {
        println("Adjectives2 processCellWithoutRuns: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —è—á–µ–π–∫—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤, –ø—Ä–∏–º–µ–Ω—è—è —Å—Ç–∏–ª–∏.")
        val font = getCellFont(cell)
        val color = font?.let { getFontColor(it) }
        val rawContent = adjustWordUz(text, wordUz)
        val markedContent = when (color) {
            "#FF0000" -> "||$rawContent||"
            "#0000FF" -> "\$\$$rawContent\$\$"
            else -> rawContent
        }
        return markedContent//.escapeMarkdownV2()
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞
    fun processFormattedRuns(richText: XSSFRichTextString, text: String, wordUz: String?): String {
        println("Adjectives2 processFormattedRuns: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ —è—á–µ–π–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–º–µ–Ω—ã.")
        val result = buildString {
            for (i in 0 until richText.numFormattingRuns()) {
                val start = richText.getIndexOfFormattingRun(i)
                val end = if (i + 1 < richText.numFormattingRuns()) richText.getIndexOfFormattingRun(i + 1) else text.length
                val substring = text.substring(start, end)
                val font = richText.getFontOfFormattingRun(i) as? XSSFFont
                val colorHex = font?.let { getFontColor(it) } ?: "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
                val adjustedSubstring = adjustWordUz(substring, wordUz)
                when (colorHex) {
                    "#FF0000" -> append("||${adjustedSubstring/*.escapeMarkdownV2()*/}||")
                    "#0000FF" -> append("$$${adjustedSubstring/*.escapeMarkdownV2()*/}$$")
                    else -> append(adjustedSubstring/*.escapeMarkdownV2()*/)
                }
            }
        }
        return result
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏
    fun getCellFont(cell: Cell): XSSFFont? {
        println("Adjectives2 getCellFont: –ü–æ–ª—É—á–∞–µ—Ç —à—Ä–∏—Ñ—Ç —è—á–µ–π–∫–∏ –∏–∑ Excel-—Ñ–∞–π–ª–∞.")
        val workbook = cell.sheet.workbook as? org.apache.poi.xssf.usermodel.XSSFWorkbook
        if (workbook == null) {
            return null
        }
        val fontIndex = cell.cellStyle.fontIndexAsInt
        val font = workbook.getFontAt(fontIndex) as? XSSFFont
        return font
    }

    fun getFontColor(font: XSSFFont): String {
        println("Adjectives2 getFontColor: –ò–∑–≤–ª–µ–∫–∞–µ—Ç HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏.")
        val xssfColor = font.xssfColor
        if (xssfColor == null) {
            return "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
        }
        val rgb = xssfColor.rgb
        val result = if (rgb != null) {
            val colorHex = rgb.joinToString(prefix = "#", separator = "") { "%02X".format(it) }
            colorHex
        } else {
            "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
        }
        return result
    }

    fun XSSFColor.getRgbWithTint(): ByteArray? {
        println("Adjectives2 XSSFColor.getRgbWithTint: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç RGB —Ü–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–∞.")
        val baseRgb = rgb
        if (baseRgb == null) {
            return null
        }
        val tint = this.tint
        val result = if (tint != 0.0) {
            baseRgb.map { (it and 0xFF.toByte()) * (1 + tint) }
                .map { it.coerceIn(0.0, 255.0).toInt().toByte() }
                .toByteArray()
        } else {
            baseRgb
        }
        return result
    }

    fun sendReplacementsMessage(chatId: Long, bot: Bot) {
        println("Adjectives2 sendReplacementsMessage: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 9 –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã.")
        val userPairs = Globals.sheetColumnPairs[chatId]
        if (userPairs.isNullOrEmpty()) {
            GlobalScope.launch {
                TelegramMessageService.updateOrSendMessageWithoutMarkdown(
                    chatId = chatId,
                    text = "–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
            }
            return
        }
        val messageText = userPairs.entries.joinToString("\n") { (key, value) ->
            "$key - $value"
        }
        GlobalScope.launch {
            TelegramMessageService.updateOrSendMessageWithoutMarkdown(
                chatId = chatId,
                text = messageText
            )
        }
    }

    fun initializeSheetColumnPairsFromFile(chatId: Long) {
        println("Adjectives2 initializeSheetColumnPairsFromFile: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã —Å–ª–æ–≤ –∏–∑ Excel.")
        Globals.sheetColumnPairs[chatId] = mutableMapOf()
        val userPairs = collectSheetColumnPairs()
        if (userPairs.size == 9) {
            Globals.sheetColumnPairs[chatId] = userPairs
        }
        generateReplacements(chatId)
    }

    private fun collectSheetColumnPairs(): MutableMap<String, String> {
        println("Adjectives2 collectSheetColumnPairs: –°–æ–±–∏—Ä–∞–µ—Ç –ø–∞—Ä—ã —Å–ª–æ–≤ –∏–∑ –ª–∏—Å—Ç–æ–≤ Excel –≤ –æ–¥–∏–Ω –º–∞–ø.")
        val userPairs = mutableMapOf<String, String>()
        val file = File(Config.TABLE_FILE)
        if (!file.exists()) {
            return userPairs
        }
        val excelManager = ExcelManager(Config.TABLE_FILE)
        val sheetNames = listOf("–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ", "–ì–ª–∞–≥–æ–ª—ã", "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ")
        excelManager.useWorkbook { workbook ->
            for (sheetName in sheetNames) {
                val sheet = workbook.getSheet(sheetName)
                if (sheet == null) {
                    println("‚ö†Ô∏è –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    continue
                }
                val selectedPairs = processSheetForPairs(sheet, sheetName)
                for ((key, value) in selectedPairs) {
                    userPairs[key] = value
                }
            }
        }
        return userPairs
    }


    private fun extractCandidatePairs(sheet: org.apache.poi.ss.usermodel.Sheet): List<Pair<String, String>> {
        println("Adjectives2 extractCandidatePairs: –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä—ã –∏–∑ Excel-–ª–∏—Å—Ç–∞.")
        val candidates = mutableListOf<Pair<String, String>>()
        for (i in 0..sheet.lastRowNum) {
            val row = sheet.getRow(i) ?: continue
            val key = row.getCell(0)?.toString()?.trim() ?: ""
            val value = row.getCell(1)?.toString()?.trim() ?: ""
            if (key.isNotEmpty() && value.isNotEmpty()) {
                candidates.add(key to value)
            }
        }
        return candidates
    }

    private fun processSheetForPairs(sheet: org.apache.poi.ss.usermodel.Sheet, sheetName: String): List<Pair<String, String>> {
        println("Adjectives2 processSheetForPairs: –í—ã–±–∏—Ä–∞–µ—Ç 3 —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ª–∏—Å—Ç–∞ Excel.")
        val candidates = extractCandidatePairs(sheet)
        if (candidates.size < 3) {
            println("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ $sheetName –¥–ª—è –≤—ã–±–æ—Ä–∞ 3 –ø–∞—Ä.")
            return emptyList()
        }
        return candidates.shuffled().take(3)
    }

    fun markAdjective2AsCompleted(chatId: Long, filePath: String) {
        println("üîπ markAdjective2AsCompleted: –ü–æ–º–µ—á–∞–µ—Ç –±–ª–æ–∫ '–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2' –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤ –ª–∏—Å—Ç–µ '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'")
        val excelManager = ExcelManager(filePath)
        excelManager.useWorkbook { workbook ->
            val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                ?: throw IllegalArgumentException("–õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–µ –Ω–∞–π–¥–µ–Ω")

            val userRow = sheet.find { row ->
                val idCell = row.getCell(0)
                val id = when (idCell?.cellType) {
                    CellType.NUMERIC -> idCell.numericCellValue.toLong()
                    CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                    else -> null
                }
                id == chatId
            }

            if (userRow != null) {
                val cell = userRow.getCell(15) ?: userRow.createCell(15) // O = 16-—è –∫–æ–ª–æ–Ω–∫–∞ = –∏–Ω–¥–µ–∫—Å 15
                cell.setCellValue(1.0)
                excelManager.safelySaveWorkbook(workbook)
                println("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º 2 –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–æ–ª–æ–Ω–∫—É O.")
            } else {
                println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ª–∏—Å—Ç–µ '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'")
            }
        }
    }

}






//import com.github.kotlintelegrambot.Bot
//import com.github.kotlintelegrambot.config.Config
//import com.github.kotlintelegrambot.entities.ChatId
//import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
//import com.github.kotlintelegrambot.entities.ParseMode
//import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
//import com.github.kotlintelegrambot.keyboards.Keyboards
//import kotlinx.coroutines.GlobalScope
//import kotlinx.coroutines.launch
//import org.apache.poi.ss.usermodel.Cell
//import org.apache.poi.ss.usermodel.Row
//import org.apache.poi.ss.usermodel.Sheet
//import org.apache.poi.xssf.usermodel.XSSFColor
//import org.apache.poi.xssf.usermodel.XSSFFont
//import org.apache.poi.xssf.usermodel.XSSFRichTextString
//import java.io.File
//import kotlin.collections.joinToString
//import kotlin.collections.map
//import kotlin.experimental.and
//
//object Adjectives2 {
//
//    fun callAdjective2(chatId: Long, bot: Bot) {
//        println("callAdjective2: –í—ã–±—Ä–∞–Ω –±–ª–æ–∫ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 2")
//        Globals.userBlocks[chatId] = 6
//        Globals.userStates.remove(chatId)
//        Globals.userPadezh.remove(chatId)
//        Globals.userColumnOrder.remove(chatId)
//        handleBlockAdjective2(chatId, bot)
//    }
//
//    fun callChangeWordsAdjective2(chatId: Long, bot: Bot) {
//        println("callChangeWordsAdjective2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤ –¥–ª—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 2")
//        Globals.userReplacements.remove(chatId)
//        Globals.sheetColumnPairs.remove(chatId)
//        Globals.userStates.remove(chatId)
//        initializeSheetColumnPairsFromFile(chatId)
//        handleBlockAdjective2(chatId, bot)
//    }
//
//    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫—É —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏
//    fun handleBlockAdjective2(chatId: Long, bot: Bot) {
//        println("UUU2 handleBlockAdjective2 // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫—É —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏")
//        println("U21 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId")
//
//        val currentBlock = Globals.userBlocks[chatId] ?: 1
//        println("U22 –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: $currentBlock, –õ–∏—Å—Ç: –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2")
//
//        if (Globals.userReplacements[chatId].isNullOrEmpty()) {
//            initializeSheetColumnPairsFromFile(chatId)
//            println("U23 –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–º–µ–Ω—ã: ${Globals.userReplacements[chatId]}")
//        }
//
//        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑ Config
//        val rangesForAdjectives = Config.ADJECTIVE_RANGES_2
//        println("U24 –î–∏–∞–ø–∞–∑–æ–Ω—ã –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤: $rangesForAdjectives")
//
//        val currentState = Globals.userStates[chatId] ?: 0
//        println("U25 –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentState")
//
//        // –ï—Å–ª–∏ –≤—Å–µ –º–∏–Ω–∏-–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
//        if (currentState >= rangesForAdjectives.size) {
//            println("U26 –í—Å–µ –º–∏–Ω–∏-–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.")
//            sendFinalButtonsForAdjectives(chatId, bot)
//            Globals.userReplacements.remove(chatId) // –û—á–∏—â–∞–µ–º –∑–∞–º–µ–Ω—ã
//            return
//        }
//
//        val currentRange = rangesForAdjectives[currentState]
//        println("U27 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: $currentRange")
//
//        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–º–µ–Ω–∞–º–∏
//        val messageText = try {
//            generateAdjectiveMessage(Config.TABLE_FILE, "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2", currentRange, Globals.userReplacements[chatId]!!)
//        } catch (e: Exception) {
//            bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
//            println("U28 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
//            return
//        }
//        println("U29 –°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $messageText")
//
//        val isLastRange = currentState == rangesForAdjectives.size - 1
//        println("U210 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: $isLastRange")
//
//        if (Globals.userStates[chatId] == null) { // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –≤–æ—à–µ–ª –≤ –±–ª–æ–∫
//            sendReplacementsMessage(chatId, bot) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 9 –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤
//        }
//
//        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª–∏–±–æ —Å –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª–µ–µ", –ª–∏–±–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é)
//        if (isLastRange) {
//            println("–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
//            GlobalScope.launch {
//                TelegramMessageService.updateOrSendMessage(
//                    chatId = chatId,
//                    text = messageText,
//                    //parseMode = ParseMode.MARKDOWN_V2
//                )
//            }
//            sendFinalButtonsForAdjectives(chatId, bot)
//        } else {
//            println("–ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–î–∞–ª–µ–µ'.")
//            GlobalScope.launch {
//                TelegramMessageService.updateOrSendMessage(
//                    chatId = chatId,
//                    text = messageText,
//                    //parseMode = ParseMode.MARKDOWN_V2,
//                    replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
//                        InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next_adjective:$chatId")
//                    )
//                )
//            }
//        }
//        println("U211 –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chatId=$chatId")
//    }
//
//    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//    fun generateReplacements(chatId: Long) {
//        println("VVV generateReplacements // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
//
//        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//        val userPairs = Globals.sheetColumnPairs[chatId] ?: run {
//            println("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ sheetColumnPairs –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
//            return
//        }
//
//        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ (—É–∑–±–µ–∫—Å–∫–∏–µ —Å–ª–æ–≤–∞)
//        val keysList = userPairs.keys.toList()
//        if (keysList.size < 9) {
//            println("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã.")
//        }
//
//        // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω—è–µ–º—ã–π Map (MutableMap)
//        val replacements = mutableMapOf<Int, String>()
//        keysList.take(9).forEachIndexed { index, key ->
//            replacements[index + 1] = key
//        }
//
//        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º userReplacements –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//        Globals.userReplacements[chatId] = replacements
//        println("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: $replacements")
//    }
//
//    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
//    fun generateAdjectiveMessage(
//        filePath: String,
//        sheetName: String,
//        range: String,
//        replacements: Map<Int, String>
//    ): String {
//        println("WWW generateAdjectiveMessage // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö")
//        println("W1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName, range=$range")
//
//        val rawText = generateMessageFromRange(filePath, sheetName, range, null, null)
//        println("W2 –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: \"$rawText\"")
//
//        val processedText = rawText.replace(Regex("[1-9]")) { match ->
//            val digit = match.value.toInt()
//            replacements[digit] ?: match.value // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–º–µ–Ω—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
//        }
//        println("W3 –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"$processedText\"")
//        return processedText
//    }
//
//    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
//    fun sendFinalButtonsForAdjectives(chatId: Long, bot: Bot) {
//        println("XXX sendFinalButtonsForAdjectives // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é")
//        println("X1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId")
//
//        val currentBlock = Globals.userBlocks[chatId] ?: 5  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 (–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 1)
//        val repeatCallback = if (currentBlock == 5) "block:adjective1" else "block:adjective2"
//        val changeWordsCallback = if (currentBlock == 5) "change_words_adjective1" else "change_words_adjective2"
//
//        val navigationButton = if (currentBlock == 5) {
//            InlineKeyboardButton.CallbackData("–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫", "block:adjective2")
//        } else {
//            InlineKeyboardButton.CallbackData("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫", "block:adjective1")
//        }
//
//        GlobalScope.launch {
//            TelegramMessageService.updateOrSendMessage(
//                chatId = chatId,
//                text = "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
//                replyMarkup = Keyboards.finalAdjectiveButtons(Globals.userBlocks[chatId] ?: 5)
//            )
//        }
//        println("X2 –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chatId=$chatId")
//    }
//
//    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel
//    fun generateMessageFromRange(filePath: String, sheetName: String, range: String, wordUz: String?, wordRus: String?): String {
//        println("SSS generateMessageFromRange // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel")
//        println("S1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName, range=$range, wordUz=$wordUz, wordRus=$wordRus")
//
//        val file = File(filePath)
//        if (!file.exists()) {
//            println("S2 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
//            throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
//        }
//
//        val excelManager = ExcelManager(filePath)
//        val result = excelManager.useWorkbook { workbook ->
//            val sheet = workbook.getSheet(sheetName)
//            if (sheet == null) {
//                println("S3 –û—à–∏–±–∫–∞: –ª–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω.")
//                throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
//            }
//
//            println("S4 –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω. –ò–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ $range")
//            val cells = extractCellsFromRange(sheet, range, wordUz)
//            println("S5 –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: $cells")
//
//            val firstCell = cells.firstOrNull() ?: ""
//            val messageBody = cells.drop(1).joinToString("\n")
//
//            val res = listOf(firstCell, messageBody).filter { it.isNotBlank() }.joinToString("\n\n")
//            println("S7 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: $res")
//            res
//        }
//        println("S6 –§–∞–π–ª Excel –∑–∞–∫—Ä—ã—Ç.")
//        return result
//    }
//
//    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown V2
//    fun String.escapeMarkdownV2(): String {
//        println("TTT escapeMarkdownV2 // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown V2")
//        println("T1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –°—Ç—Ä–æ–∫–∞: \"$this\"")
//        val escaped = this.replace("\\", "\\\\")
//            .replace("_", "\\_")
//            .replace("*", "\\*")
//            .replace("[", "\\[")
//            .replace("]", "\\]")
//            .replace("(", "\\(")
//            .replace(")", "\\)")
//            .replace("~", "\\~")
//            .replace("`", "\\`")
//            .replace(">", "\\>")
//            .replace("#", "\\#")
//            .replace("+", "\\+")
//            .replace("-", "\\-")
//            .replace("=", "\\=")
//            .replace("|", "\\|")
//            .replace("{", "\\{")
//            .replace("}", "\\}")
//            .replace(".", "\\.")
//            .replace("!", "\\!")
//        println("T2 –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: \"$escaped\"")
//        return escaped
//    }
//
//    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–±–µ–∫—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
//    fun adjustWordUz(content: String, wordUz: String?): String {
//        println("UUU adjustWordUz // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–±–µ–∫—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏")
//        println("U1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: content=\"$content\", wordUz=\"$wordUz\"")
//
//        fun Char.isVowel() = this.lowercaseChar() in "aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è"
//
//        val result = buildString {
//            var i = 0
//            while (i < content.length) {
//                val char = content[i]
//                when {
//                    char == '+' && i + 1 < content.length -> {
//                        val nextChar = content[i + 1]
//                        val lastChar = wordUz?.lastOrNull()
//                        val replacement = when {
//                            lastChar != null && lastChar.isVowel() && nextChar.isVowel() -> "s"
//                            lastChar != null && !lastChar.isVowel() && !nextChar.isVowel() -> "i"
//                            else -> ""
//                        }
//                        append(replacement)
//                        append(nextChar)
//                        i++
//                    }
//                    char == '*' -> append(wordUz)
//                    else -> append(char)
//                }
//                i++
//            }
//        }
//        println("U2 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: \"$result\"")
//        return result
//    }
//
//    fun getRangeIndices(range: String): Pair<Int, Int> {
//        val parts = range.split("-")
//        if (parts.size != 2) {
//            throw IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞: $range")
//        }
//        val start = parts[0].replace(Regex("[A-Z]"), "").toInt() - 1
//        val end = parts[1].replace(Regex("[A-Z]"), "").toInt() - 1
//        return start to end
//    }
//
//    fun processRowForRange(row: Row, column: Int, wordUz: String?): String? {
//        val cell = row.getCell(column)
//        return cell?.let { processCellContent(it, wordUz) }
//    }
//
//    fun extractCellsFromRange(sheet: Sheet, range: String, wordUz: String?): List<String> {
//        println("VVV extractCellsFromRange // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–µ–∫ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
//        println("V1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: range=\"$range\", wordUz=\"$wordUz\"")
//
//        val (start, end) = getRangeIndices(range)
//        val column = range[0] - 'A'
//        println("V2 –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫: $start-$end, –ö–æ–ª–æ–Ω–∫–∞: $column")
//
//        return (start..end).mapNotNull { rowIndex ->
//            val row = sheet.getRow(rowIndex)
//            if (row == null) {
//                println("V3 ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
//                null
//            } else {
//                val processed = processRowForRange(row, column, wordUz)
//                println("V5 ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: \"$processed\"")
//                processed
//            }
//        }.also { cells ->
//            println("V6 –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: $cells")
//        }
//    }
//
//    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏
//    fun processCellContent(cell: Cell?, wordUz: String?): String {
//        println("bbb processCellContent // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏")
//
//        println("b1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: cell=$cell, wordUz=$wordUz")
//        if (cell == null) {
//            println("b2 –Ø—á–µ–π–∫–∞ –ø—É—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.")
//            return ""
//        }
//
//        val richText = cell.richStringCellValue as XSSFRichTextString
//        val text = richText.string
//        println("b3 –ò–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏: \"$text\"")
//
//        val runs = richText.numFormattingRuns()
//        println("b4 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞: $runs")
//
//        val result = if (runs == 0) {
//            println("b5 –ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
//            processCellWithoutRuns(cell, text, wordUz)
//        } else {
//            println("b6 –ï—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤.")
//            processFormattedRuns(richText, text, wordUz)
//        }
//
//        println("b7 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è—á–µ–π–∫–∏: \"$result\"")
//        return result
//    }
//
//    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
//    fun processCellWithoutRuns(cell: Cell, text: String, wordUz: String?): String {
//        println("ccc processCellWithoutRuns // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤")
//
//        println("c1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: cell=$cell, text=$text, wordUz=$wordUz")
//        val font = getCellFont(cell)
//        println("c2 –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —è—á–µ–π–∫–∏: $font")
//
//        val isRed = font != null && getFontColor(font) == "#FF0000"
//        println("c3 –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫—Ä–∞—Å–Ω—ã–π: $isRed")
//
//        val result = if (isRed) {
//            println("c4 –í—Å—è —è—á–µ–π–∫–∞ –∏–º–µ–µ—Ç –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç. –ë–ª—é—Ä–∏–º —Ç–µ–∫—Å—Ç.")
//            "||${adjustWordUz(text, wordUz).escapeMarkdownV2()}||"
//        } else {
//            println("c5 –¢–µ–∫—Å—Ç –Ω–µ –∫—Ä–∞—Å–Ω—ã–π. –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
//            adjustWordUz(text, wordUz).escapeMarkdownV2()
//        }
//
//        println("c6 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: \"$result\"")
//        return result
//    }
//
//    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞
//    fun processFormattedRuns(richText: XSSFRichTextString, text: String, wordUz: String?): String {
//        println("ddd processFormattedRuns // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞")
//
//        println("d1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: richText=$richText, text=$text, wordUz=$wordUz")
//        val result = buildString {
//            for (i in 0 until richText.numFormattingRuns()) {
//                val start = richText.getIndexOfFormattingRun(i)
//                val end = if (i + 1 < richText.numFormattingRuns()) richText.getIndexOfFormattingRun(i + 1) else text.length
//                val substring = text.substring(start, end)
//
//                val font = richText.getFontOfFormattingRun(i) as? XSSFFont
//                val colorHex = font?.let { getFontColor(it) } ?: "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
//                println("d2 üé® –¶–≤–µ—Ç —É—á–∞—Å—Ç–∫–∞ $i: $colorHex")
//
//                val adjustedSubstring = adjustWordUz(substring, wordUz)
//
//                if (colorHex == "#FF0000") {
//                    println("d3 üî¥ –¢–µ–∫—Å—Ç —É—á–∞—Å—Ç–∫–∞ \"$substring\" –∫—Ä–∞—Å–Ω—ã–π. –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é—Ä.")
//                    append("||${adjustedSubstring.escapeMarkdownV2()}||")
//                } else {
//                    println("d4 –¢–µ–∫—Å—Ç —É—á–∞—Å—Ç–∫–∞ \"$substring\" –Ω–µ –∫—Ä–∞—Å–Ω—ã–π. –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.")
//                    append(adjustedSubstring.escapeMarkdownV2())
//                }
//            }
//        }
//        println("d5 ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤: \"$result\"")
//        return result
//    }
//
//    // –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏
//    fun getCellFont(cell: Cell): XSSFFont? {
//        println("eee getCellFont // –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏")
//
//        println("e1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: cell=$cell")
//        val workbook = cell.sheet.workbook as? org.apache.poi.xssf.usermodel.XSSFWorkbook
//        if (workbook == null) {
//            println("e2 ‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —à—Ä–∏—Ñ—Ç, workbook –Ω–µ —è–≤–ª—è–µ—Ç—Å—è XSSFWorkbook.")
//            return null
//        }
//        val fontIndex = cell.cellStyle.fontIndexAsInt
//        println("e3 –ò–Ω–¥–µ–∫—Å —à—Ä–∏—Ñ—Ç–∞: $fontIndex")
//
//        val font = workbook.getFontAt(fontIndex) as? XSSFFont
//        println("e4 –†–µ–∑—É–ª—å—Ç–∞—Ç: font=$font")
//        return font
//    }
//
//    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞
//    fun getFontColor(font: XSSFFont): String {
//        println("fff getFontColor // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞")
//
//        println("f1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: font=$font")
//        val xssfColor = font.xssfColor
//        if (xssfColor == null) {
//            println("f2 ‚ö†Ô∏è –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
//            return "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
//        }
//
//        val rgb = xssfColor.rgb
//        val result = if (rgb != null) {
//            val colorHex = rgb.joinToString(prefix = "#", separator = "") { "%02X".format(it) }
//            println("f3 üé® –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX: $colorHex")
//            colorHex
//        } else {
//            println("f4 ‚ö†Ô∏è RGB –Ω–µ –Ω–∞–π–¥–µ–Ω.")
//            "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
//        }
//
//        println("f5 –†–µ–∑—É–ª—å—Ç–∞—Ç: $result")
//        return result
//    }
//
//    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–æ–≤
//    fun XSSFColor.getRgbWithTint(): ByteArray? {
//        println("ggg getRgbWithTint // –ü–æ–ª—É—á–µ–Ω–∏–µ RGB —Ü–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–∞")
//
//        println("g1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: XSSFColor=$this")
//        val baseRgb = rgb
//        if (baseRgb == null) {
//            println("g2 ‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π RGB –Ω–µ –Ω–∞–π–¥–µ–Ω.")
//            return null
//        }
//        println("g3 –ë–∞–∑–æ–≤—ã–π RGB: ${baseRgb.joinToString { "%02X".format(it) }}")
//
//        val tint = this.tint
//        val result = if (tint != 0.0) {
//            println("g4 –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç—Ç–µ–Ω–æ–∫: $tint")
//            baseRgb.map { (it and 0xFF.toByte()) * (1 + tint) }
//                .map { it.coerceIn(0.0, 255.0).toInt().toByte() }
//                .toByteArray()
//        } else {
//            println("g5 –û—Ç—Ç–µ–Ω–æ–∫ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")
//            baseRgb
//        }
//
//        println("g6 –ò—Ç–æ–≥–æ–≤—ã–π RGB —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–∞: ${result?.joinToString { "%02X".format(it) }}")
//        return result
//    }
//
//    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å 9 –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤ –∏–∑ sheetColumnPairs
//    fun sendReplacementsMessage(chatId: Long, bot: Bot) {
//        println("### sendReplacementsMessage // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å 9 –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤ –∏–∑ sheetColumnPairs")
//
//        val userPairs = Globals.sheetColumnPairs[chatId]
//
//        if (userPairs.isNullOrEmpty()) {
//            println("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –≤ sheetColumnPairs –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId.")
//            GlobalScope.launch {
//                TelegramMessageService.updateOrSendMessage(
//                    chatId = chatId,
//                    text = "–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
//                )
//            }
//            return
//        }
//
//        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
//        val messageText = userPairs.entries.joinToString("\n") { (key, value) ->
//            "$key - $value"
//        }
//        GlobalScope.launch {
//            TelegramMessageService.updateOrSendMessage(
//                chatId = chatId,
//                text = messageText
//            )
//        }
//
//        println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId:\n$messageText")
//    }
//
//    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//    fun initializeSheetColumnPairsFromFile(chatId: Long) {
//        println("### initializeSheetColumnPairsFromFile // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
//
//        Globals.sheetColumnPairs[chatId] = mutableMapOf()  // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//        val file = File(Config.TABLE_FILE)
//        if (!file.exists()) {
//            println("‚ùå –§–∞–π–ª $Config.TABLE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!")
//            return
//        }
//
//        val excelManager = ExcelManager(Config.TABLE_FILE)
//        val sheetNames = listOf("–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ", "–ì–ª–∞–≥–æ–ª—ã", "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ")
//        val userPairs = mutableMapOf<String, String>()  // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä
//
//        excelManager.useWorkbook { workbook ->
//            for (sheetName in sheetNames) {
//                val sheet = workbook.getSheet(sheetName)
//                if (sheet == null) {
//                    println("‚ö†Ô∏è –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω!")
//                    continue  // ‚úÖ –ü—Ä–æ—Å—Ç–æ continue, –±–µ–∑ run {}
//                }
//
//                val candidates = mutableListOf<Pair<String, String>>() // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –≤—ã–±–æ—Ä–∫—É
//
//                for (i in 0..sheet.lastRowNum) {
//                    val row = sheet.getRow(i) ?: continue
//                    val key = row.getCell(0)?.toString()?.trim() ?: ""
//                    val value = row.getCell(1)?.toString()?.trim() ?: ""
//                    if (key.isNotEmpty() && value.isNotEmpty()) {
//                        candidates.add(key to value)
//                    }
//                }
//
//                if (candidates.size < 3) {
//                    println("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ $sheetName –¥–ª—è –≤—ã–±–æ—Ä–∞ 3 –ø–∞—Ä.")
//                    continue
//                }
//
//                val selectedPairs = candidates.shuffled().take(3)  // –ë–µ—Ä–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã
//                for ((key, value) in selectedPairs) {
//                    userPairs[key] = value
//                }
//            }
//        }
//
//        if (userPairs.size == 9) {
//            Globals.sheetColumnPairs[chatId] = userPairs  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã –≤ –æ–±—â–∏–π –º–∞–ø
//            println("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã 9 –ø–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: $userPairs")
//        } else {
//            println("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω–æ ${userPairs.size} –ø–∞—Ä –≤–º–µ—Å—Ç–æ 9.")
//        }
//        generateReplacements(chatId)
//    }
//}