import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.config.Config
import com.github.kotlintelegrambot.dispatcher.initializeUserBlockStates
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.ParseMode
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.keyboards.Keyboards
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.CellType
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Sheet
import org.apache.poi.xssf.usermodel.XSSFColor
import org.apache.poi.xssf.usermodel.XSSFFont
import org.apache.poi.xssf.usermodel.XSSFRichTextString
import java.io.File
import kotlin.collections.joinToString
import kotlin.collections.map
import kotlin.experimental.and

object Nouns3 {

    fun callNouns3(chatId: Long, bot: Bot) {
        println("callNouns3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞ 3")
        initializeUserBlockStates(chatId, Config.TABLE_FILE)
        val (block1Completed, block2Completed, _) = Globals.userBlockCompleted[chatId] ?: Triple(false, false, false)
        if (block1Completed && block2Completed) {
            Globals.userBlocks[chatId] = 3
            handleBlock3(chatId, bot, Config.TABLE_FILE, Globals.userWordUz[chatId], Globals.userWordRus[chatId])
        } else {
            val notCompletedBlocks = mutableListOf<String>()
            if (!block1Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 1")
            if (!block2Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 2")
            val messageText = "–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:\n" +
                    notCompletedBlocks.joinToString("\n") + "\n–ü—Ä–æ–π–¥–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ 3-–º—É –±–ª–æ–∫—É."
            GlobalScope.launch {
                TelegramMessageService.updateOrSendMessage(
                    chatId = chatId,
                    text = messageText,
                    replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                        InlineKeyboardButton.CallbackData("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º", "main_menu")
                    )
                )
            }
        }
    }

    fun handleBlock3(chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?) {
        println("üöÄ handleBlock3 // –ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 3 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")

        if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
            sendWordMessage(chatId, bot, filePath)
            println("‚ùå –û—à–∏–±–∫–∞: —Å–ª–æ–≤–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            return
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∏–∑ Config
        val allRanges = Config.ALL_RANGES_BLOCK_3

        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –ø–æ—Ä—è–¥–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ ‚Äî –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        if (Globals.userColumnOrder[chatId].isNullOrEmpty()) {
            Globals.userColumnOrder[chatId] = allRanges.shuffled().toMutableList()
            println("üîÄ –ü–µ—Ä–µ–º–µ—à–∞–ª–∏ –º–∏–Ω–∏-–±–ª–æ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: ${Globals.userColumnOrder[chatId]}")
        }

        val shuffledRanges = Globals.userColumnOrder[chatId]!!
        val currentState = Globals.userStates[chatId] ?: 0
        println("üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentState")

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val completedRanges = getCompletedRanges(chatId, filePath)
        println("‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –º–∏–Ω–∏-–±–ª–æ–∫–∏: $completedRanges")

        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω
        var currentRange: String? = null
        for (range in shuffledRanges) {
            if (!completedRanges.contains(range)) {
                currentRange = range
                break
            }
        }

        // –ï—Å–ª–∏ –í–°–ï 30 –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ç–æ –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
        if (currentRange == null) {
            println("‚ö†Ô∏è –í–°–ï 30 –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞.")
            currentRange = shuffledRanges[currentState % shuffledRanges.size]
        }

        println("üéØ –í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: $currentRange")

        val messageText = try {
            generateMessageFromRange(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 3", currentRange!!, wordUz, wordRus)
        } catch (e: Exception) {
            bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
            return
        }

        val isLastRange = currentState == 5 // 6 —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ
        println("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: \"$messageText\"")

        GlobalScope.launch {
            TelegramMessageService.updateOrSendMessage(
                chatId = chatId,
                text = messageText,
                //parseMode = ParseMode.MARKDOWN_V2,
                replyMarkup = if (isLastRange) null else Keyboards.nextButton(wordUz, wordRus)
            )
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        saveUserProgressBlok3(chatId, filePath, currentRange!!)
        println("üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $currentRange")

        if (!isLastRange) {
            println("üìå –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É")
        } else {
            println("üèÅ –ú–∏–Ω–∏-–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é")
            updateUserProgressForMiniBlocks(chatId, filePath, shuffledRanges.indices.toList())
            sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤
    fun sendWordMessage(chatId: Long, bot: Bot, filePath: String) {
        println("KKK sendWordMessage // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤")
        println("K1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath")

        if (!File(filePath).exists()) {
            println("K2 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            GlobalScope.launch {
                TelegramMessageService.updateOrSendMessage(
                    chatId = chatId,
                    text = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
            }
            println("K3 –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
            return
        }

        val inlineKeyboard = try {
            println("K4 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ $filePath")
            createWordSelectionKeyboardFromExcel(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ")
        } catch (e: Exception) {
            println("K5 –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
            GlobalScope.launch {
                TelegramMessageService.updateOrSendMessage(
                    chatId = chatId,
                    text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}"
                )
            }
            println("K6 –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
            return
        }

        println("K7 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: $inlineKeyboard")
        GlobalScope.launch {
            TelegramMessageService.updateOrSendMessage(
                chatId = chatId,
                text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                replyMarkup = inlineKeyboard
            )
        }
        println("K8 –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ Excel-—Ñ–∞–π–ª–∞
    fun createWordSelectionKeyboardFromExcel(filePath: String, sheetName: String): InlineKeyboardMarkup {
        println("LLL createWordSelectionKeyboardFromExcel // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ Excel-—Ñ–∞–π–ª–∞")
        println("L1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName")

        println("L2 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ $filePath")
        val file = File(filePath)
        if (!file.exists()) {
            println("L3 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
            throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        val excelManager = ExcelManager(filePath)
        val buttons = excelManager.useWorkbook { workbook ->
            val sheet = workbook.getSheet(sheetName)
                ?: throw IllegalArgumentException("D5 –û—à–∏–±–∫–∞: –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
            println("L6 –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")
            println("L7 –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${sheet.lastRowNum + 1}")
            val randomRows = (1..sheet.lastRowNum).shuffled().take(10)
            println("L8 –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫: $randomRows")
            println("L9 –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫")
            val buttons = randomRows.mapNotNull { rowIndex ->
                val row = sheet.getRow(rowIndex)
                if (row == null) {
                    println("L10 –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return@mapNotNull null
                }

                val wordUz = row.getCell(0)?.toString()?.trim()
                val wordRus = row.getCell(1)?.toString()?.trim()

                if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
                    println("L11 –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: wordUz=$wordUz, wordRus=$wordRus. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return@mapNotNull null
                }

                println("L12 –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ $rowIndex: wordUz=$wordUz, wordRus=$wordRus")
                InlineKeyboardButton.CallbackData("$wordUz - $wordRus", "word:($wordUz - $wordRus)")
            }.chunked(2)
            println("L13 –ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫: ${buttons.size}")
            buttons
        }
        println("L14 –§–∞–π–ª Excel –∑–∞–∫—Ä—ã—Ç. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return InlineKeyboardMarkup.create(buttons)
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    fun sendFinalButtons(chatId: Long, bot: Bot, wordUz: String?, wordRus: String?, filePath: String) {
        println("RRR sendFinalButtons // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π")
        println("R1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, wordUz=$wordUz, wordRus=$wordRus")

        GlobalScope.launch {
            TelegramMessageService.updateOrSendMessage(
                chatId = chatId,
                text = "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∏ –ø–∞–¥–µ–∂–æ–º. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                replyMarkup = Keyboards.finalButtons(wordUz, wordRus, Globals.userBlocks[chatId] ?: 1)
            )
        }
        println("R2 –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel
    fun generateMessageFromRange(filePath: String, sheetName: String, range: String, wordUz: String?, wordRus: String?): String {
        println("SSS generateMessageFromRange // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel")
        println("S1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName, range=$range, wordUz=$wordUz, wordRus=$wordRus")

        val file = File(filePath)
        if (!file.exists()) {
            println("S2 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        val excelManager = ExcelManager(filePath)
        val result = excelManager.useWorkbook { workbook ->
            val sheet = workbook.getSheet(sheetName)
            if (sheet == null) {
                println("S3 –û—à–∏–±–∫–∞: –ª–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
            }

            println("S4 –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω. –ò–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ $range")
            val cells = extractCellsFromRange(sheet, range, wordUz)
            println("S5 –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: $cells")

            val firstCell = cells.firstOrNull() ?: ""
            val messageBody = cells.drop(1).joinToString("\n")

            val res = listOf(firstCell, messageBody).filter { it.isNotBlank() }.joinToString("\n\n")
            println("S7 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: $res")
            res
        }
        println("S6 –§–∞–π–ª Excel –∑–∞–∫—Ä—ã—Ç.")
        return result
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown V2
    fun String.escapeMarkdownV2(): String {
        println("TTT escapeMarkdownV2 // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown V2")
        println("T1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –°—Ç—Ä–æ–∫–∞: \"$this\"")
        val escaped = this.replace("\\", "\\\\")
            .replace("_", "\\_")
            .replace("*", "\\*")
            .replace("[", "\\[")
            .replace("]", "\\]")
            .replace("(", "\\(")
            .replace(")", "\\)")
            .replace("~", "\\~")
            .replace("`", "\\`")
            .replace(">", "\\>")
            .replace("#", "\\#")
            .replace("+", "\\+")
            .replace("-", "\\-")
            .replace("=", "\\=")
            .replace("|", "\\|")
            .replace("{", "\\{")
            .replace("}", "\\}")
            .replace(".", "\\.")
            .replace("!", "\\!")
        println("T2 –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: \"$escaped\"")
        return escaped
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–±–µ–∫—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
    fun adjustWordUz(content: String, wordUz: String?): String {
        println("UUU adjustWordUz // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–±–µ–∫—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏")
        println("U1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: content=\"$content\", wordUz=\"$wordUz\"")

        fun Char.isVowel() = this.lowercaseChar() in "aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è"

        val result = buildString {
            var i = 0
            while (i < content.length) {
                val char = content[i]
                when {
                    char == '+' && i + 1 < content.length -> {
                        val nextChar = content[i + 1]
                        val lastChar = wordUz?.lastOrNull()
                        val replacement = when {
                            lastChar != null && lastChar.isVowel() && nextChar.isVowel() -> "s"
                            lastChar != null && !lastChar.isVowel() && !nextChar.isVowel() -> "i"
                            else -> ""
                        }
                        append(replacement)
                        append(nextChar)
                        i++
                    }
                    char == '*' -> append(wordUz)
                    else -> append(char)
                }
                i++
            }
        }
        println("U2 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: \"$result\"")
        return result
    }

    fun getRangeIndices(range: String): Pair<Int, Int> {
        val parts = range.split("-")
        if (parts.size != 2) {
            throw IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞: $range")
        }
        val start = parts[0].replace(Regex("[A-Z]"), "").toInt() - 1
        val end = parts[1].replace(Regex("[A-Z]"), "").toInt() - 1
        return start to end
    }

    fun processRowForRange(row: Row, column: Int, wordUz: String?): String? {
        val cell = row.getCell(column)
        return cell?.let { processCellContent(it, wordUz) }
    }

    fun extractCellsFromRange(sheet: Sheet, range: String, wordUz: String?): List<String> {
        println("VVV extractCellsFromRange // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–µ–∫ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        println("V1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: range=\"$range\", wordUz=\"$wordUz\"")

        val (start, end) = getRangeIndices(range)
        val column = range[0] - 'A'
        println("V2 –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫: $start-$end, –ö–æ–ª–æ–Ω–∫–∞: $column")

        return (start..end).mapNotNull { rowIndex ->
            val row = sheet.getRow(rowIndex)
            if (row == null) {
                println("V3 ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                null
            } else {
                val processed = processRowForRange(row, column, wordUz)
                println("V5 ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: \"$processed\"")
                processed
            }
        }.also { cells ->
            println("V6 –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: $cells")
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏
    fun processCellContent(cell: Cell?, wordUz: String?): String {
        println("bbb processCellContent // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏")

        println("b1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: cell=$cell, wordUz=$wordUz")
        if (cell == null) {
            println("b2 –Ø—á–µ–π–∫–∞ –ø—É—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.")
            return ""
        }

        val richText = cell.richStringCellValue as XSSFRichTextString
        val text = richText.string
        println("b3 –ò–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏: \"$text\"")

        val runs = richText.numFormattingRuns()
        println("b4 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞: $runs")

        val result = if (runs == 0) {
            println("b5 –ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            processCellWithoutRuns(cell, text, wordUz)
        } else {
            println("b6 –ï—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤.")
            processFormattedRuns(richText, text, wordUz)
        }

        println("b7 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è—á–µ–π–∫–∏: \"$result\"")
        return result
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
    fun processCellWithoutRuns(cell: Cell, text: String, wordUz: String?): String {
        println("ccc processCellWithoutRuns // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤")

        println("c1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: cell=$cell, text=$text, wordUz=$wordUz")
        val font = getCellFont(cell)
        println("c2 –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —è—á–µ–π–∫–∏: $font")

        val isRed = font != null && getFontColor(font) == "#FF0000"
        println("c3 –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫—Ä–∞—Å–Ω—ã–π: $isRed")

        val result = if (isRed) {
            println("c4 –í—Å—è —è—á–µ–π–∫–∞ –∏–º–µ–µ—Ç –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç. –ë–ª—é—Ä–∏–º —Ç–µ–∫—Å—Ç.")
            "||${adjustWordUz(text, wordUz).escapeMarkdownV2()}||"
        } else {
            println("c5 –¢–µ–∫—Å—Ç –Ω–µ –∫—Ä–∞—Å–Ω—ã–π. –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            adjustWordUz(text, wordUz).escapeMarkdownV2()
        }

        println("c6 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: \"$result\"")
        return result
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞
    fun processFormattedRuns(richText: XSSFRichTextString, text: String, wordUz: String?): String {
        println("ddd processFormattedRuns // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞")

        println("d1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: richText=$richText, text=$text, wordUz=$wordUz")
        val result = buildString {
            for (i in 0 until richText.numFormattingRuns()) {
                val start = richText.getIndexOfFormattingRun(i)
                val end = if (i + 1 < richText.numFormattingRuns()) richText.getIndexOfFormattingRun(i + 1) else text.length
                val substring = text.substring(start, end)

                val font = richText.getFontOfFormattingRun(i) as? XSSFFont
                val colorHex = font?.let { getFontColor(it) } ?: "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
                println("d2 üé® –¶–≤–µ—Ç —É—á–∞—Å—Ç–∫–∞ $i: $colorHex")

                val adjustedSubstring = adjustWordUz(substring, wordUz)

                if (colorHex == "#FF0000") {
                    println("d3 üî¥ –¢–µ–∫—Å—Ç —É—á–∞—Å—Ç–∫–∞ \"$substring\" –∫—Ä–∞—Å–Ω—ã–π. –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é—Ä.")
                    append("||${adjustedSubstring.escapeMarkdownV2()}||")
                } else {
                    println("d4 –¢–µ–∫—Å—Ç —É—á–∞—Å—Ç–∫–∞ \"$substring\" –Ω–µ –∫—Ä–∞—Å–Ω—ã–π. –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.")
                    append(adjustedSubstring.escapeMarkdownV2())
                }
            }
        }
        println("d5 ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤: \"$result\"")
        return result
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏
    fun getCellFont(cell: Cell): XSSFFont? {
        println("eee getCellFont // –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏")

        println("e1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: cell=$cell")
        val workbook = cell.sheet.workbook as? org.apache.poi.xssf.usermodel.XSSFWorkbook
        if (workbook == null) {
            println("e2 ‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —à—Ä–∏—Ñ—Ç, workbook –Ω–µ —è–≤–ª—è–µ—Ç—Å—è XSSFWorkbook.")
            return null
        }
        val fontIndex = cell.cellStyle.fontIndexAsInt
        println("e3 –ò–Ω–¥–µ–∫—Å —à—Ä–∏—Ñ—Ç–∞: $fontIndex")

        val font = workbook.getFontAt(fontIndex) as? XSSFFont
        println("e4 –†–µ–∑—É–ª—å—Ç–∞—Ç: font=$font")
        return font
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞
    fun getFontColor(font: XSSFFont): String {
        println("fff getFontColor // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞")

        println("f1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: font=$font")
        val xssfColor = font.xssfColor
        if (xssfColor == null) {
            println("f2 ‚ö†Ô∏è –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
            return "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
        }

        val rgb = xssfColor.rgb
        val result = if (rgb != null) {
            val colorHex = rgb.joinToString(prefix = "#", separator = "") { "%02X".format(it) }
            println("f3 üé® –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX: $colorHex")
            colorHex
        } else {
            println("f4 ‚ö†Ô∏è RGB –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
        }

        println("f5 –†–µ–∑—É–ª—å—Ç–∞—Ç: $result")
        return result
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–æ–≤
    fun XSSFColor.getRgbWithTint(): ByteArray? {
        println("ggg getRgbWithTint // –ü–æ–ª—É—á–µ–Ω–∏–µ RGB —Ü–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–∞")

        println("g1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: XSSFColor=$this")
        val baseRgb = rgb
        if (baseRgb == null) {
            println("g2 ‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π RGB –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return null
        }
        println("g3 –ë–∞–∑–æ–≤—ã–π RGB: ${baseRgb.joinToString { "%02X".format(it) }}")

        val tint = this.tint
        val result = if (tint != 0.0) {
            println("g4 –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç—Ç–µ–Ω–æ–∫: $tint")
            baseRgb.map { (it and 0xFF.toByte()) * (1 + tint) }
                .map { it.coerceIn(0.0, 255.0).toInt().toByte() }
                .toByteArray()
        } else {
            println("g5 –û—Ç—Ç–µ–Ω–æ–∫ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")
            baseRgb
        }

        println("g6 –ò—Ç–æ–≥–æ–≤—ã–π RGB —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–∞: ${result?.joinToString { "%02X".format(it) }}")
        return result
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤
    fun updateUserProgressForMiniBlocks(chatId: Long, filePath: String, completedMiniBlocks: List<Int>) {
        println("iii updateUserProgressForMiniBlocks // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–∏–Ω–∏-–±–ª–æ–∫–∞–º")
        println("i1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath, completedMiniBlocks=$completedMiniBlocks")

        val file = File(filePath)
        if (!file.exists()) {
            println("i2 –û—à–∏–±–∫–∞: –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        }

        val excelManager = ExcelManager(filePath)
        excelManager.useWorkbook { workbook ->
            val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                ?: throw IllegalArgumentException("–õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (row in sheet) {
                val idCell = row.getCell(0)
                val chatIdFromCell = when (idCell?.cellType) {
                    CellType.NUMERIC -> idCell.numericCellValue.toLong()
                    CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                    else -> null
                }

                if (chatIdFromCell == chatId) {
                    println("i4 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å.")
                    // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –æ—Ç L (11) –∏ –¥–∞–ª—å—à–µ
                    completedMiniBlocks.forEach { miniBlock ->
                        val columnIndex = 11 + miniBlock // L = 11, M = 12 –∏ —Ç.–¥.
                        val cell = row.getCell(columnIndex) ?: row.createCell(columnIndex)
                        val currentValue = cell.numericCellValue.takeIf { it > 0 } ?: 0.0
                        cell.setCellValue(currentValue + 1)
                        println("i5 –ú–∏–Ω–∏-–±–ª–æ–∫ $miniBlock: —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = $currentValue, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = ${currentValue + 1}")
                    }
                    excelManager.safelySaveWorkbook(workbook)
                    println("i6 –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId.")
                    return@useWorkbook
                }
            }
            println("i7 –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fun saveUserProgressBlok3(chatId: Long, filePath: String, range: String) {
        println("üìå saveUserProgressBlok3 // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        val columnIndex = Config.COLUMN_MAPPING[range]
        if (columnIndex == null) {
            println("‚ùå –û—à–∏–±–∫–∞: –î–∏–∞–ø–∞–∑–æ–Ω $range –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ä—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.")
            return
        }
        println("‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω $range -> –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É $columnIndex")

        val excelManager = ExcelManager(filePath)
        excelManager.useWorkbook { workbook ->
            val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫") ?: workbook.createSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫")
            val headerRow = sheet.getRow(0) ?: sheet.createRow(0)
            var userColumnIndex = -1

            for (col in 0 until 31) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 30 —Å—Ç–æ–ª–±—Ü–∞
                val cell = headerRow.getCell(col) ?: headerRow.createCell(col)
                if (cell.cellType == CellType.NUMERIC && cell.numericCellValue.toLong() == chatId) {
                    userColumnIndex = col
                    break
                } else if (cell.cellType == CellType.BLANK) { // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—É—Å—Ç–æ–π, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º ID
                    cell.setCellValue(chatId.toDouble())
                    userColumnIndex = col
                    break
                }
            }

            if (userColumnIndex == -1) {
                println("‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ ID!")
                return@useWorkbook
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –±–∞–ª–ª–∞ (–ø–æ –∏–Ω–¥–µ–∫—Å—É —Å—Ç–æ–ª–±—Ü–∞)
            val row = sheet.getRow(columnIndex) ?: sheet.createRow(columnIndex)
            val cell = row.getCell(userColumnIndex) ?: row.createCell(userColumnIndex)
            val currentScore = cell.numericCellValue.takeIf { it > 0 } ?: 0.0
            cell.setCellValue(currentScore + 1)

            println("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω: chatId=$chatId, —Å—Ç–æ–ª–±–µ—Ü=$userColumnIndex, —Å—Ç—Ä–æ–∫–∞=$columnIndex, –Ω–æ–≤—ã–π –±–∞–ª–ª=${currentScore + 1}")

            excelManager.safelySaveWorkbook(workbook)
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤
    fun getCompletedRanges(chatId: Long, filePath: String): Set<String> {
        println("üìä getCompletedRanges // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤")

        val completedRanges = mutableSetOf<String>()
        val file = File(filePath)
        if (!file.exists()) {
            println("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return emptySet()
        }

        val excelManager = ExcelManager(filePath)
        excelManager.useWorkbook { workbook ->
            val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫") ?: return@useWorkbook
            val headerRow = sheet.getRow(0) ?: return@useWorkbook

            var userColumnIndex: Int? = null
            for (col in 0 until 31) {
                val cell = headerRow.getCell(col)
                if (cell != null && cell.cellType == CellType.NUMERIC && cell.numericCellValue.toLong() == chatId) {
                    userColumnIndex = col
                    break
                }
            }

            if (userColumnIndex == null) {
                println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
                return@useWorkbook
            }

            val rangeMapping = listOf(
                "A1-A7", "B1-B7", "C1-C7", "D1-D7", "E1-E7", "F1-F7",
                "A8-A14", "B8-B14", "C8-C14", "D8-D14", "E8-E14", "F8-F14",
                "A15-A21", "B15-B21", "C15-C21", "D15-D21", "E15-E21", "F15-F21",
                "A22-A28", "B22-B28", "C22-C28", "D22-D28", "E22-E28", "F22-F28",
                "A29-A35", "B29-B35", "C29-C35", "D29-D35", "E29-E35", "F29-F35"
            )

            for ((index, range) in rangeMapping.withIndex()) {
                val row = sheet.getRow(index + 1) ?: continue
                val cell = row.getCell(userColumnIndex)
                val value = cell?.numericCellValue ?: 0.0
                if (value > 0) {
                    completedRanges.add(range)
                }
            }
        }

        println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: $completedRanges")
        return completedRanges
    }
}