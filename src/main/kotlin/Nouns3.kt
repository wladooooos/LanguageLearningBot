import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.config.Config
import com.github.kotlintelegrambot.dispatcher.initializeUserBlockStates
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.keyboards.Keyboards
import com.google.gson.Gson
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.CellType
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Sheet
import org.apache.poi.xssf.usermodel.XSSFColor
import org.apache.poi.xssf.usermodel.XSSFFont
import org.apache.poi.xssf.usermodel.XSSFRichTextString
import kotlin.collections.joinToString
import kotlin.collections.map
import kotlin.collections.mapNotNull
import kotlin.collections.set
import kotlin.experimental.and

object Nouns3 {

    fun callNouns3(chatId: Long, bot: Bot) {
        println("nouns3 callNouns3 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª–æ–∫ 3 –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ 1 –∏ 2")
        Globals.userColumnOrder.remove(chatId)
        Globals.userStates.remove(chatId)
        initializeUserBlockStates(chatId, Config.TABLE_FILE)
        val (block1Completed, block2Completed, _) = Globals.userBlockCompleted[chatId] ?: Triple(false, false, false)
        if (block1Completed && block2Completed) {
            Globals.userBlocks[chatId] = 3
            handleBlock3(chatId, bot, Config.TABLE_FILE, Globals.userWordUz[chatId], Globals.userWordRus[chatId])
        } else {
            val notCompletedBlocks = getIncompleteBlocks(block1Completed, block2Completed)
            sendIncompleteBlocksMessage(chatId, bot, notCompletedBlocks)
        }
    }


    private fun getIncompleteBlocks(block1Completed: Boolean, block2Completed: Boolean): List<String> {
        println("nouns3 getIncompleteBlocks –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤")
        val notCompletedBlocks = mutableListOf<String>()
        if (!block1Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 1")
        if (!block2Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 2")
        return notCompletedBlocks
    }

    private fun sendIncompleteBlocksMessage(chatId: Long, bot: Bot, notCompletedBlocks: List<String>) {
        println("nouns3 sendIncompleteBlocksMessage –°–æ–æ–±—â–∞–µ—Ç –æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–∞—Ö")
        val messageText = "–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:\n" +
                notCompletedBlocks.joinToString("\n") + "\n–ü—Ä–æ–π–¥–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ 3-–º—É –±–ª–æ–∫—É."
        GlobalScope.launch {
            TelegramMessageService.updateOrSendMessage(
                chatId = chatId,
                text = messageText,
                replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                    InlineKeyboardButton.CallbackData("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º", "main_menu")
                )
            )
        }
    }

    fun handleBlock3(chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?) {
        println("nouns3 handleBlock3 –ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–∏–∫—É –±–ª–æ–∫–∞ 3 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤")
        val shuffledRanges = initializeBlock3Ranges(chatId)
        val currentState = Globals.userStates[chatId] ?: 0
        val completedRanges = getCompletedRanges(chatId, filePath)
        val currentRange = getCurrentRange(shuffledRanges, completedRanges.toList(), currentState)
        updateGlobalsForBlock3(chatId, currentRange)
        val messageText = generateBlock3Message(chatId, bot, filePath, currentRange, wordUz!!, wordRus!!)
            ?: return
        val isLastRange = currentState == 29 // –ï—Å–ª–∏ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ
        val replyMarkup = determineReplyMarkup(currentState, wordUz, wordRus)
        sendBlock3Message(chatId, messageText, replyMarkup)

        if (Globals.userBlockCompleted[chatId]?.third != true) {
            saveUserProgressBlok3(chatId, filePath, currentRange)
        }

//        updateProgressIfNeeded(chatId, filePath, currentState)
//        if (isLastRange) {
//            updateUserProgressForMiniBlocks(chatId, filePath, shuffledRanges.indices.toList())
//        }
    }

    private fun initializeBlock3Ranges(chatId: Long): MutableList<String> {
        println("nouns3 initializeBlock3Ranges –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤ –¥–ª—è –±–ª–æ–∫–∞ 3")
        val allRanges = Config.ALL_RANGES_BLOCK_3
        if (Globals.userColumnOrder[chatId].isNullOrEmpty()) {
            Globals.userColumnOrder[chatId] = allRanges.shuffled().toMutableList()
        }
        var userColumnIndex = Globals.userColumnOrder[chatId]!!
        println("nouns3 initializeBlock3Ranges –ø–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: $userColumnIndex")
        return userColumnIndex
    }

    private fun getCurrentRange(shuffledRanges: List<String>, completedRanges: List<String>, currentState: Int): String {
        println("nouns3 getCurrentRange –í—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        for (range in shuffledRanges) {
            if (!completedRanges.contains(range)) {
                return range
            }
        }
        return shuffledRanges[currentState % shuffledRanges.size]
    }

    private fun updateGlobalsForBlock3(chatId: Long, currentRange: String) {
        println("nouns3 updateGlobalsForBlock3 –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ 3")
        Globals.currentSheetName[chatId] = "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 3"
        Globals.currentRange[chatId] = currentRange
    }

    private fun generateBlock3Message(chatId: Long, bot: Bot, filePath: String, currentRange: String, wordUz: String, wordRus: String): String? {
        println("nouns3 generateBlock3Message –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∞ 3 –∏–∑ Excel")
        return try {
            generateMessageFromRange(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 3", currentRange, wordUz, wordRus, showHint = false)
        } catch (e: Exception) {
            bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            null
        }
    }

    private fun determineReplyMarkup(currentState: Int, wordUz: String, wordRus: String): InlineKeyboardMarkup {
        return if (currentState == 29) {
            println("nouns3 determineReplyMarkup –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            InlineKeyboardMarkup.create(
                listOf(
                    listOf(InlineKeyboardButton.CallbackData("–°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", "nouns3Change_word_random")),
                    listOf(InlineKeyboardButton.CallbackData("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É", "block:test"))
                )
            )
        } else {
            Keyboards.buttonNextChengeWord(wordUz, wordRus)
        }
    }

    private fun sendBlock3Message(chatId: Long, messageText: String, replyMarkup: InlineKeyboardMarkup) {
        println("nouns3 sendBlock3Message –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ Telegram")
        GlobalScope.launch {
            TelegramMessageService.updateOrSendMessage(
                chatId = chatId,
                text = messageText,
                replyMarkup = replyMarkup
            )
        }
    }

    private fun updateProgressIfNeeded(chatId: Long, filePath: String, currentState: Int) {
        println("nouns3 updateProgressIfNeeded –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤")
        if ((currentState + 1) % 5 == 0) {
            println("üìå –ü–æ—Å–ª–µ ${currentState + 1} —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
            updateUserProgressForMiniBlocks(chatId, filePath, (0..currentState).toList())
        }
    }

    fun generateMessageFromRange(filePath: String, sheetName: String, range: String, wordUz: String?, wordRus: String?, showHint: Boolean = false): String {
        println("nouns3 generateMessageFromRange –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel")
        val excelManager = ExcelManager(filePath)
        val rawText = excelManager.useWorkbook { workbook ->
            val sheet = getSheetOrThrow(workbook, sheetName)
            val cells = extractCellsFromRange(sheet, range, wordUz)
            combineCells(cells, wordRus, wordUz)
        }
        return processRawText(rawText, showHint, wordRus, wordUz)
    }

    private fun extractCellsFromRange(sheet: Sheet, range: String, wordUz: String?): List<String> {
        println("Nouns3 extractCellsFromRange –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —è—á–µ–π–∫–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.")
        val (start, end) = getRangeIndices(range)
        val column = range[0] - 'A'
        val cells = (start..end).mapNotNull { rowIndex ->
            val row = sheet.getRow(rowIndex)
            if (row == null) {
                null
            } else {
                val processed = processRowForRange(row, column, wordUz)
                processed
            }
        }
        return cells
    }
    private fun processRowForRange(row: Row, column: Int, wordUz: String?): String? {
        println("Nouns3 processRowForRange –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã, –∏–∑–≤–ª–µ–∫–∞—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É.")
        val cell = row.getCell(column)
        val result = cell?.let { processCellContent(it, wordUz) }
        return result
    }
    private fun processCellContent(cell: Cell?, wordUz: String?): String {
        println("Nouns3 processCellContent –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏, —É—á–∏—Ç—ã–≤–∞—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.")
        if (cell == null) {
            return ""
        }
        val richText = cell.richStringCellValue as XSSFRichTextString
        val text = richText.string
        val runs = richText.numFormattingRuns()
        val result = if (runs == 0) {
            processCellWithoutRuns(cell, text, wordUz)
        } else {
            processFormattedRuns(richText, text, wordUz)
        }
        return result
    }
    private fun processFormattedRuns(richText: XSSFRichTextString, text: String, wordUz: String?): String {
        println("Nouns3 processFormattedRuns")
        val result = buildString {
            val runs = richText.numFormattingRuns()
            for (i in 0 until runs) {
                val start = richText.getIndexOfFormattingRun(i)
                val end = if (i + 1 < runs) richText.getIndexOfFormattingRun(i + 1) else text.length
                val substring = text.substring(start, end)
                val font = richText.getFontOfFormattingRun(i) as? XSSFFont
                val colorHex = font?.let { getFontColor(it) } ?: "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
                //val adjustedSubstring = adjustWordUz(substring, wordUz)
                val runContent = when (colorHex) {
                    "#FF0000" -> {
                        "||$substring||"
                    }
                    "#0000FF" -> {
                        "\$\$$substring\$\$"
                    }

                    else -> {
                        substring
                    }
                }
                append(runContent)
            }
        }
        val finalAdjusted = adjustFinalText(result.toString(), wordUz)
        return finalAdjusted.escapeMarkdownV2()
    }
//    private fun adjustWordUz(content: String, wordUz: String?): String {
//        println("Nouns3 adjustWordUz")
//        fun Char.isVowel() = this.lowercaseChar() in "aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è"
//        val result = buildString {
//            var i = 0
//            while (i < content.length) {
//                val char = content[i]
//                when {
//                    char == '+' && i + 1 < content.length -> {
//                        val nextChar = content[i + 1]
//                        val lastChar = wordUz?.lastOrNull()
//                        val replacement = when {
//                            lastChar != null && lastChar.isVowel() && nextChar.isVowel() -> {
//                                "s"
//                            }
//
//                            lastChar != null && !lastChar.isVowel() && !nextChar.isVowel() -> {
//                                "i"
//                            }
//
//                            else -> {
//                                ""
//                            }
//                        }
//                        append(replacement)
//                        append(nextChar)
//                        i++
//                    }
//
//                    char == '*' -> {
//                        append(wordUz)
//                    }
//
//                    else -> append(char)
//                }
//                i++
//            }
//        }
//        return result
//    }
private fun adjustFinalText(text: String, wordUz: String?): String {
    fun Char.isVowel() = this.lowercaseChar() in "aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    val sb = StringBuilder()
    var i = 0
    while (i < text.length) {
        when {
            // –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞ '*' –Ω–∞ wordUz
            text[i] == '*' -> {
                sb.append(wordUz)
                i++
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ "+<—Å–∏–º–≤–æ–ª>", –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã "||"
            text[i] == '+' && i + 1 < text.length -> {
                var j = i + 1
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ "||"
                while (j < text.length - 1 && text[j] == '|' && text[j + 1] == '|') {
                    j += 2
                }
                if (j < text.length) {
                    val nextChar = text[j]
                    val lastChar = wordUz?.lastOrNull()
                    val replacement = when {
                        lastChar != null && lastChar.isVowel() && nextChar.isVowel() -> "s"
                        lastChar != null && !lastChar.isVowel() && !nextChar.isVowel() -> "i"
                        else -> ""
                    }
                    sb.append(replacement)
                    sb.append(nextChar)
                    i = j + 1
                } else {
                    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ '+' –Ω–µ—Ç –∑–Ω–∞—á–∞—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º '+'
                    sb.append('+')
                    i++
                }
            }
            // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∫–æ–ø–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –∫–∞–∫ –µ—Å—Ç—å
            else -> {
                sb.append(text[i])
                i++
            }
        }
    }
    return sb.toString()
}


    private fun getFontColor(font: XSSFFont): String {
        println("Nouns3 getFontColor")
        val xssfColor = font.xssfColor
        if (xssfColor == null) {
            return "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
        }
        val rgb = xssfColor.rgb
        val result = if (rgb != null) {
            val colorHex = rgb.joinToString(prefix = "#", separator = "") { "%02X".format(it) }
            colorHex
        } else {
            "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
        }
        return result
    }
    private fun processCellWithoutRuns(cell: Cell, text: String, wordUz: String?): String {
        println("Nouns3 processCellWithoutRuns –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —è—á–µ–π–∫—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è—è —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        val font = getCellFont(cell)
        val color = font?.let { getFontColor(it) }
        val rawContent = adjustFinalText(text, wordUz)
        val markedContent = when (color) {
            "#FF0000" -> "||$rawContent||"
            "#0000FF" -> "\$\$${rawContent}\$\$"
            else -> rawContent
        }
        val escapedContent = markedContent.escapeMarkdownV2()
        return escapedContent
    }
    private fun getCellFont(cell: Cell): XSSFFont? {
        println("Nouns3 getCellFont")
        val workbook = cell.sheet.workbook as? org.apache.poi.xssf.usermodel.XSSFWorkbook
        if (workbook == null) {
            return null
        }
        val fontIndex = cell.cellStyle.fontIndexAsInt
        val font = workbook.getFontAt(fontIndex) as? XSSFFont
        if (font != null) {
        } else {
        }
        return font
    }
    private fun getRangeIndices(range: String): Pair<Int, Int> {
        println("Nouns3 getRangeIndices –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        val parts = range.split("-")
        if (parts.size != 2) {
            throw IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞: $range")
        }
        val start = parts[0].replace(Regex("[A-Z]"), "").toInt() - 1
        val end = parts[1].replace(Regex("[A-Z]"), "").toInt() - 1
        return start to end
    }

//    private fun validateFileExists(filePath: String): File {
//        println("nouns3 validateFileExists –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏")
//        val file = File(filePath)
//        if (!file.exists()) {
//            throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
//        }
//        return file
//    }

    private fun getSheetOrThrow(workbook: org.apache.poi.ss.usermodel.Workbook, sheetName: String): org.apache.poi.ss.usermodel.Sheet {
        println("nouns3 getSheetOrThrow –ü–æ–ª—É—á–∞–µ—Ç –ª–∏—Å—Ç –∏–∑ Excel –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        return workbook.getSheet(sheetName) ?: throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    private fun combineCells(cells: List<String>, wordRus: String?, wordUz: String?): String {
        println("nouns3 combineCells –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —è—á–µ–π–∫–∏ –≤ –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        val mainText = cells.firstOrNull()?.replace("#", "$wordRus \\- $wordUz") ?: ""
        val hintText = cells.drop(1).joinToString("\n")
        return if (hintText.isNotBlank()) "$mainText\n\n$hintText" else mainText
    }

    private fun processRawText(rawText: String, showHint: Boolean, wordRus: String?, wordUz: String?): String {
        println("nouns3 processRawText –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Å–∫—Ä—ã–≤–∞—è –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∏")
        return if (showHint) {
            rawText.replace("\$\$", "")
        } else {
            rawText.replace(Regex("""\$\$.*?\$\$""", RegexOption.DOT_MATCHES_ALL), "$wordRus \\\\- $wordUz")
        }
    }

//    fun sendWordMessage(chatId: Long, bot: Bot, filePath: String) {
//        println("\n sendWordMessage // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤")
//        println("K1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath")
//        if (!isFileAvailable(filePath)) {
//            sendErrorMessage(chatId, bot, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
//            println("K3 –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
//            return
//        }
//        val inlineKeyboard = try {
//            println("K4 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ $filePath")
//            createWordSelectionKeyboardFromExcel(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ")
//        } catch (e: Exception) {
//            println("K5 –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
//            sendErrorMessage(chatId, bot, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
//            println("K6 –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
//            return
//        }
//        println("K7 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: $inlineKeyboard")
//        sendWordKeyboard(chatId, bot, inlineKeyboard)
//        println("K8 –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
//    }
//
//    private fun isFileAvailable(filePath: String): Boolean {
//        return File(filePath).exists()
//    }
//
//    private fun sendErrorMessage(chatId: Long, bot: Bot, message: String) {
//        GlobalScope.launch {
//            TelegramMessageService.updateOrSendMessage(
//                chatId = chatId,
//                text = message
//            )
//        }
//    }
//
//    private fun sendWordKeyboard(chatId: Long, bot: Bot, inlineKeyboard: InlineKeyboardMarkup) {
//        GlobalScope.launch {
//            TelegramMessageService.updateOrSendMessage(
//                chatId = chatId,
//                text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
//                replyMarkup = inlineKeyboard
//            )
//        }
//    }
//
//
//    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ Excel-—Ñ–∞–π–ª–∞
//    fun createWordSelectionKeyboardFromExcel(filePath: String, sheetName: String): InlineKeyboardMarkup {
//        println("\n createWordSelectionKeyboardFromExcel // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ Excel-—Ñ–∞–π–ª–∞")
//        println("L1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName")
//
//        println("L2 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ $filePath")
//        val file = File(filePath)
//        if (!file.exists()) {
//            println("L3 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
//            throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
//        }
//
//        val excelManager = ExcelManager(filePath)
//        val buttons = excelManager.useWorkbook { workbook ->
//            val sheet = workbook.getSheet(sheetName)
//                ?: throw IllegalArgumentException("D5 –û—à–∏–±–∫–∞: –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
//            println("L6 –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")
//            println("L7 –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${sheet.lastRowNum + 1}")
//            val randomRows = (1..sheet.lastRowNum).shuffled().take(10)
//            println("L8 –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫: $randomRows")
//            println("L9 –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫")
//            val buttons = randomRows.mapNotNull { rowIndex ->
//                val row = sheet.getRow(rowIndex)
//                if (row == null) {
//                    println("L10 –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
//                    return@mapNotNull null
//                }
//
//                val wordUz = row.getCell(0)?.toString()?.trim()
//                val wordRus = row.getCell(1)?.toString()?.trim()
//
//                if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
//                    println("L11 –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: wordUz=$wordUz, wordRus=$wordRus. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º")
//                    return@mapNotNull null
//                }
//
//                println("L12 –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ $rowIndex: wordUz=$wordUz, wordRus=$wordRus")
//                InlineKeyboardButton.CallbackData("$wordUz - $wordRus", "word:($wordUz - $wordRus)")
//            }.chunked(2)
//            println("L13 –ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫: ${buttons.size}")
//            buttons
//        }
//        println("L14 –§–∞–π–ª Excel –∑–∞–∫—Ä—ã—Ç. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
//
//        return InlineKeyboardMarkup.create(buttons)
//    }
//
//    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
//    fun sendFinalButtons(chatId: Long, bot: Bot, wordUz: String?, wordRus: String?, filePath: String) {
//        println("\nR sendFinalButtons // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π")
//        println("R1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, wordUz=$wordUz, wordRus=$wordRus")
//
//        GlobalScope.launch {
//            TelegramMessageService.updateOrSendMessage(
//                chatId = chatId,
//                text = "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∏ –ø–∞–¥–µ–∂–æ–º. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
//                replyMarkup = Keyboards.finalButtons(wordUz, wordRus, Globals.userBlocks[chatId] ?: 1)
//            )
//        }
//        println("R2 –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
//    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel

//    fun generateMessageFromRange(
//        filePath: String,
//        sheetName: String,
//        range: String,
//        wordUz: String?,
//        wordRus: String?,
//        showHint: Boolean = false
//    ): String {
//        println("\nNouns3 generateMessageFromRange // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel")
//        val file = File(filePath)
//        if (!file.exists()) throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
//        val excelManager = ExcelManager(filePath)
//        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å spoiler‚Äë–º–∞—Ä–∫–∏—Ä–æ–≤–∫—É (||...||)
//        val rawText = excelManager.useWorkbook { workbook ->
//            val sheet = workbook.getSheet(sheetName)
//                ?: throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
//            val cells = extractCellsFromRange(sheet, range, wordUz)
//            val firstCell = cells.firstOrNull() ?: ""
//            val messageBody = cells.drop(1).joinToString("\n")
//            listOf(firstCell, messageBody).filter { it.isNotBlank() }.joinToString("\n\n")
//        }
//        return if (showHint) {
//            // –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è ‚Äì —É–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã "||"
//            rawText.replace("||", "")
//        } else {
//            // –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–∫—Ä—ã—Ç–∞ ‚Äì –∑–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –≤–∏–¥–∞ "||...||" (—Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫) –Ω–∞ —Å–∏–º–≤–æ–ª "*"
//            rawText.replace(Regex("\\|\\|.*?\\|\\|", RegexOption.DOT_MATCHES_ALL), "*")
//        }
//    }


//    –°—Ç–∞—Ä–∞—è:
//    fun generateMessageFromRange(filePath: String, sheetName: String, range: String, wordUz: String?, wordRus: String?): String {
//        println("SSS generateMessageFromRange // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel")
//        println("S1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName, range=$range, wordUz=$wordUz, wordRus=$wordRus")
//
//        val file = File(filePath)
//        if (!file.exists()) {
//            println("S2 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
//            throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
//        }
//
//        val excelManager = ExcelManager(filePath)
//        val result = excelManager.useWorkbook { workbook ->
//            val sheet = workbook.getSheet(sheetName)
//            if (sheet == null) {
//                println("S3 –û—à–∏–±–∫–∞: –ª–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω.")
//                throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
//            }
//
//            println("S4 –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω. –ò–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ $range")
//            val cells = extractCellsFromRange(sheet, range, wordUz)
//            println("S5 –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: $cells")
//
//            val firstCell = cells.firstOrNull() ?: ""
//            val messageBody = cells.drop(1).joinToString("\n")
//
//            val res = listOf(firstCell, messageBody).filter { it.isNotBlank() }.joinToString("\n\n")
//            println("S7 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: $res")
//            res
//        }
//        println("S6 –§–∞–π–ª Excel –∑–∞–∫—Ä—ã—Ç.")
//        return result
//    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown V2
    private fun String.escapeMarkdownV2(): String {
        println("nouns3 escapeMarkdownV2 –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2")
        val escaped = this.replace("\\", "\\\\")
            .replace("_", "\\_")
            .replace("*", "\\*")
            .replace("[", "\\[")
            .replace("]", "\\]")
            .replace("(", "\\(")
            .replace(")", "\\)")
            .replace("~", "\\~")
            .replace("`", "\\`")
            .replace(">", "\\>")
            //.replace("#", "\\#")
            //.replace("+", "\\+")
            .replace("-", "\\-")
            .replace("=", "\\=")
            //.replace("|", "\\|")
            .replace("{", "\\{")
            .replace("}", "\\}")
            .replace(".", "\\.")
            .replace("!", "\\!")
        return escaped
    }

//    fun adjustWordUz(content: String, wordUz: String?): String {
//        println("nouns3 adjustWordUz –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∑–±–µ–∫—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ")
//        fun Char.isVowel() = this.lowercaseChar() in "aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è"
//        val result = buildString {
//            var i = 0
//            while (i < content.length) {
//                val char = content[i]
//                when {
//                    char == '+' && i + 1 < content.length -> {
//                        val nextChar = content[i + 1]
//                        val lastChar = wordUz?.lastOrNull()
//                        val replacement = when {
//                            lastChar != null && lastChar.isVowel() && nextChar.isVowel() -> "s"
//                            lastChar != null && !lastChar.isVowel() && !nextChar.isVowel() -> "i"
//                            else -> ""
//                        }
//                        append(replacement)
//                        append(nextChar)
//                        i++
//                    }
//                    char == '*' -> append(wordUz)
//                    else -> append(char)
//                }
//                i++
//            }
//        }
//        return result
//    }

//    fun getRangeIndices(range: String): Pair<Int, Int> {
//        println("nouns3 getRangeIndices –í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
//        val parts = range.split("-")
//        if (parts.size != 2) {
//            throw IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞: $range")
//        }
//        val start = parts[0].replace(Regex("[A-Z]"), "").toInt() - 1
//        val end = parts[1].replace(Regex("[A-Z]"), "").toInt() - 1
//        return start to end
//    }
//
//    fun processRowForRange(row: Row, column: Int, wordUz: String?): String? {
//        println("nouns3 processRowForRange –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∏–∑–≤–ª–µ–∫–∞—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏")
//        val cell = row.getCell(column)
//        return cell?.let { processCellContent(it, wordUz) }
//    }

//    fun extractCellsFromRange(sheet: Sheet, range: String, wordUz: String?): List<String> {
//        println("\n extractCellsFromRange // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–µ–∫ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
//        println("V1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: range=\"$range\", wordUz=\"$wordUz\"")
//
//        val (start, end) = getRangeIndices(range)
//        val column = range[0] - 'A'
//        println("V2 –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫: $start-$end, –ö–æ–ª–æ–Ω–∫–∞: $column")
//
//        return (start..end).mapNotNull { rowIndex ->
//            val row = sheet.getRow(rowIndex)
//            if (row == null) {
//                println("V3 ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
//                null
//            } else {
//                val processed = processRowForRange(row, column, wordUz)
//                println("V5 ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: \"$processed\"")
//                processed
//            }
//        }.also { cells ->
//            println("V6 –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: $cells")
//        }
//    }

//    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏
//    fun processCellContent(cell: Cell?, wordUz: String?): String {
//        println("nouns3 processCellContent –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
//        if (cell == null) {
//            return ""
//        }
//        val richText = cell.richStringCellValue as XSSFRichTextString
//        val text = richText.string
//        val runs = richText.numFormattingRuns()
//        val result = if (runs == 0) {
//            processCellWithoutRuns(cell, text, wordUz)
//        } else {
//            processFormattedRuns(richText, text, wordUz)
//        }
//        return result
//    }

//    fun processCellWithoutRuns(cell: Cell, text: String, wordUz: String?): String {
//        println("nouns3 processCellWithoutRuns –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —è—á–µ–π–∫—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤")
//        val font = getCellFont(cell)
//        val isRed = font != null && getFontColor(font) == "#FF0000"
//        val result = if (isRed) {
//            "||${adjustWordUz(text, wordUz).escapeMarkdownV2()}||"
//        } else {
//            adjustWordUz(text, wordUz).escapeMarkdownV2()
//        }
//        return result
//    }
//    fun processFormattedRuns(richText: XSSFRichTextString, text: String, wordUz: String?): String {
//        println("nouns3 processFormattedRuns –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")
//        val result = buildString {
//            for (i in 0 until richText.numFormattingRuns()) {
//                val start = richText.getIndexOfFormattingRun(i)
//                val end = if (i + 1 < richText.numFormattingRuns()) richText.getIndexOfFormattingRun(i + 1) else text.length
//                val substring = text.substring(start, end)
//                val font = richText.getFontOfFormattingRun(i) as? XSSFFont
//                val colorHex = font?.let { getFontColor(it) } ?: "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
//                val adjustedSubstring = adjustWordUz(substring, wordUz)
//                if (colorHex == "#FF0000") {
//                    append("||${adjustedSubstring.escapeMarkdownV2()}||")
//                } else {
//                    append(adjustedSubstring.escapeMarkdownV2())
//                }
//            }
//        }
//        return result
//    }

//    fun getCellFont(cell: Cell): XSSFFont? {
//        println("nouns3 getCellFont –ü–æ–ª—É—á–∞–µ—Ç —à—Ä–∏—Ñ—Ç —è—á–µ–π–∫–∏ –∏–∑ Excel")
//        val workbook = cell.sheet.workbook as? org.apache.poi.xssf.usermodel.XSSFWorkbook
//        if (workbook == null) {
//            return null
//        }
//        val fontIndex = cell.cellStyle.fontIndexAsInt
//        val font = workbook.getFontAt(fontIndex) as? XSSFFont
//        return font
//    }
//
//    fun getFontColor(font: XSSFFont): String {
//        println("nouns3 getFontColor –ò–∑–≤–ª–µ–∫–∞–µ—Ç HEX —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –∏–∑ —è—á–µ–π–∫–∏")
//        val xssfColor = font.xssfColor
//        if (xssfColor == null) {
//            return "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
//        }
//        val rgb = xssfColor.rgb
//        val result = if (rgb != null) {
//            val colorHex = rgb.joinToString(prefix = "#", separator = "") { "%02X".format(it) }
//            colorHex
//        } else {
//            "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
//        }
//        return result
//    }

    private fun XSSFColor.getRgbWithTint(): ByteArray? {
        println("nouns3 XSSFColor.getRgbWithTint –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç RGB —Ü–≤–µ—Ç —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–∞")
        val baseRgb = rgb
        if (baseRgb == null) {
            return null
        }
        val tint = this.tint
        val result = if (tint != 0.0) {
            baseRgb.map { (it and 0xFF.toByte()) * (1 + tint) }
                .map { it.coerceIn(0.0, 255.0).toInt().toByte() }
                .toByteArray()
        } else {
            baseRgb
        }
        return result
    }

    private fun updateUserProgressForMiniBlocks(chatId: Long, filePath: String, completedMiniBlocks: List<Int>) {
        println("nouns3 updateUserProgressForMiniBlocks –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        val excelManager = ExcelManager(filePath)
        excelManager.useWorkbook { workbook ->
            val sheet = getUserStateSheet(workbook)
            val userRow = findUserRow(sheet, chatId)
            if (userRow != null) {
                updateMiniBlockCells(userRow, completedMiniBlocks)
                excelManager.safelySaveWorkbook(workbook)
            } else {
            }
        }
    }

    private fun getUserStateSheet(workbook: org.apache.poi.ss.usermodel.Workbook): org.apache.poi.ss.usermodel.Sheet {
        println("nouns3 getUserStateSheet –ü–æ–ª—É—á–∞–µ—Ç –ª–∏—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Excel")
        return workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            ?: throw IllegalArgumentException("–õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    }

    private fun findUserRow(sheet: org.apache.poi.ss.usermodel.Sheet, chatId: Long): org.apache.poi.ss.usermodel.Row? {
        println("nouns3 findUserRow –ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatId –≤ Excel")
        for (row in sheet) {
            val idCell = row.getCell(0)
            val chatIdFromCell = when (idCell?.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                else -> null
            }
            if (chatIdFromCell == chatId) {
                return row
            }
        }
        return null
    }

    private fun updateMiniBlockCells(row: org.apache.poi.ss.usermodel.Row, completedMiniBlocks: List<Int>) {
        println("nouns3 updateMiniBlockCells –û–±–Ω–æ–≤–ª—è–µ—Ç —è—á–µ–π–∫–∏ –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        completedMiniBlocks.forEach { miniBlock ->
            val columnIndex = 11 + miniBlock // L = 11, M = 12, –∏ —Ç.–¥.
            val cell = row.getCell(columnIndex) ?: row.createCell(columnIndex)
            val currentValue = cell.numericCellValue.takeIf { it > 0 } ?: 0.0
            cell.setCellValue(currentValue + 1)
        }
    }

    private fun saveUserProgressBlok3(chatId: Long, filePath: String, range: String) {
        println("nouns3 saveUserProgressBlok3 –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –±–ª–æ–∫–∞ 3 –≤ Excel")
        val columnIndex = getColumnIndexForRange(range)
        if (columnIndex == null) {
            return
        }
        val excelManager = ExcelManager(filePath)
        excelManager.useWorkbook { workbook ->
            val sheet = getOrCreateUserStateSheet(workbook, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫")
            val userColumnIndex = findOrCreateUserColumnIndex(sheet, chatId)
            if (userColumnIndex == -1) {
                return@useWorkbook
            }
            updateProgressCell(sheet, userColumnIndex, columnIndex, chatId)
            excelManager.safelySaveWorkbook(workbook)
        }
    }

    private fun getColumnIndexForRange(range: String): Int? {
        println("nouns3 getColumnIndexForRange –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É")
        return Config.COLUMN_MAPPING[range]
    }

    private fun getOrCreateUserStateSheet(workbook: org.apache.poi.ss.usermodel.Workbook, sheetName: String): org.apache.poi.ss.usermodel.Sheet {
        println("nouns3 getOrCreateUserStateSheet –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –ª–∏—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return workbook.getSheet(sheetName) ?: workbook.createSheet(sheetName)
    }

    private fun findOrCreateUserColumnIndex(sheet: org.apache.poi.ss.usermodel.Sheet, chatId: Long): Int {
        println("nouns3 findOrCreateUserColumnIndex –ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —è—á–µ–π–∫—É –¥–ª—è chatId –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
        val headerRow = sheet.getRow(0) ?: sheet.createRow(0)
        for (col in 0 until 31) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 30 —Å—Ç–æ–ª–±—Ü–∞
            val cell = headerRow.getCell(col) ?: headerRow.createCell(col)
            when (cell.cellType) {
                CellType.NUMERIC -> {
                    if (cell.numericCellValue.toLong() == chatId) {
                        return col
                    }
                }
                CellType.BLANK -> {
                    cell.setCellValue(chatId.toDouble())
                    return col
                }
                else -> continue
            }
        }
        return -1
    }

    private fun updateProgressCell(sheet: org.apache.poi.ss.usermodel.Sheet, userColumnIndex: Int, rowIndex: Int, chatId: Long) {
        println("nouns3 updateProgressCell –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —è—á–µ–π–∫–µ Excel")
        val row = sheet.getRow(rowIndex) ?: sheet.createRow(rowIndex)
        val cell = row.getCell(userColumnIndex) ?: row.createCell(userColumnIndex)
        val currentScore = cell.numericCellValue.takeIf { it > 0 } ?: 0.0
        cell.setCellValue(currentScore + 1)
    }


    private fun getCompletedRanges(chatId: Long, filePath: String): Set<String> {
        println("nouns3 getCompletedRanges –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤")
        val completedRanges = mutableSetOf<String>()
        val excelManager = ExcelManager(filePath)
        excelManager.useWorkbook { workbook ->
            val sheet = getUserStateSheet(workbook, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫")
            val headerRow = sheet.getRow(0) ?: return@useWorkbook
            val userColumnIndex = findUserColumnIndexInHeader(headerRow, chatId)
            if (userColumnIndex == null) {
                return@useWorkbook
            }
            val rangeMapping = Config.ALL_RANGES_BLOCK_3
            extractCompletedRanges(sheet, userColumnIndex, rangeMapping, completedRanges)
        }
        return completedRanges
    }


    private fun getUserStateSheet(workbook: org.apache.poi.ss.usermodel.Workbook, sheetName: String): org.apache.poi.ss.usermodel.Sheet {
        println("nouns3 getUserStateSheet –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –ª–∏—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏–∑ –∫–Ω–∏–≥–∏ Excel")
        return workbook.getSheet(sheetName) ?: return workbook.createSheet(sheetName)
    }

    private fun findUserColumnIndexInHeader(headerRow: org.apache.poi.ss.usermodel.Row, chatId: Long): Int? {
        println("nouns3 findUserColumnIndexInHeader –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç–æ–ª–±–µ—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –ª–∏—Å—Ç–∞")
        for (col in 0 until 31) {
            val cell = headerRow.getCell(col)
            if (cell != null && cell.cellType == CellType.NUMERIC && cell.numericCellValue.toLong() == chatId) {
                return col
            }
        }
        return null
    }

    private fun extractCompletedRanges(sheet: org.apache.poi.ss.usermodel.Sheet, userColumnIndex: Int, rangeMapping: List<String>, completedRanges: MutableSet<String>) {
        println("nouns3 extractCompletedRanges –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–∑ Excel-–ª–∏—Å—Ç–∞")
        for ((index, range) in rangeMapping.withIndex()) {
            val row = sheet.getRow(index + 1) ?: continue
            val cell = row.getCell(userColumnIndex)
            val value = cell?.numericCellValue ?: 0.0
            if (value > 0) {
                completedRanges.add(range)
            }
        }
    }


    fun callRandomWord(chatId: Long, bot: Bot) {
        println("nouns3 callRandomWord –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ")
        val filePath = Config.TABLE_FILE
        val (randomWordUz, randomWordRus) = pickRandomWordFromSheet(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ")
        updateGlobalWords(chatId, randomWordUz, randomWordRus)
        handleBlock3ChangeWord(chatId, bot, filePath)
    }

//    private fun validateExcelFile(filePath: String, chatId: Long, bot: Bot): File? {
//        val file = File(filePath)
//        if (!file.exists()) {
//            println("callRandomWord: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ $filePath")
//            bot.sendMessage(ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
//            return null
//        }
//        println("callRandomWord: –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ $filePath")
//        return file
//    }

    private fun pickRandomWordFromSheet(filePath: String, sheetName: String): Pair<String, String> {
        println("nouns3 pickRandomWordFromSheet –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ —Å –ª–∏—Å—Ç–∞ Excel")
        val excelManager = ExcelManager(filePath)
        var randomWordUz = ""
        var randomWordRus = ""
        excelManager.useWorkbook { workbook ->
            val sheet = workbook.getSheet(sheetName) ?: throw Exception("–õ–∏—Å—Ç '$sheetName' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            val randomRowIndex = (1..sheet.lastRowNum).random()
            val row = sheet.getRow(randomRowIndex)
            randomWordUz = row.getCell(0)?.toString()?.trim() ?: ""
            randomWordRus = row.getCell(1)?.toString()?.trim() ?: ""
        }
        return Pair(randomWordUz, randomWordRus)
    }

    private fun updateGlobalWords(chatId: Long, randomWordUz: String, randomWordRus: String) {
        println("nouns3 updateGlobalWords –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
        Globals.userWordUz[chatId] = randomWordUz
        Globals.userWordRus[chatId] = randomWordRus
    }

    private fun handleBlock3ChangeWord(chatId: Long, bot: Bot, filePath: String) {
        println("nouns3 handleBlock3ChangeWord –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ 3 –Ω–æ–≤—ã–º —Å–ª–æ–≤–æ–º")
        if (!areWordsSelected(chatId, bot)) return
        val (currentSheetName, currentRange) = getCurrentSheetAndRange(chatId, bot) ?: return
        val newMessageText = generateNewMessageText(filePath, currentSheetName, currentRange,
            Globals.userWordUz[chatId], Globals.userWordRus[chatId], bot, chatId) ?: return
        val mainMessageId = getMainMessageId(chatId) ?: run {
            return
        }
        updateMessage(chatId, mainMessageId, newMessageText, Globals.userWordUz[chatId], Globals.userWordRus[chatId])
    }

    private fun areWordsSelected(chatId: Long, bot: Bot): Boolean {
        println("nouns3 areWordsSelected –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–ª–æ–≤–∞ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        if (Globals.userWordUz[chatId].isNullOrBlank() || Globals.userWordRus[chatId].isNullOrBlank()) {
            return false
        }
        return true
    }

    private fun getCurrentSheetAndRange(chatId: Long, bot: Bot): Pair<String, String>? {
        println("nouns3 getCurrentSheetAndRange –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ª–∏—Å—Ç –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ Globals")
        val currentSheetName = Globals.currentSheetName[chatId] ?: "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 3"
        val currentRange = Globals.currentRange[chatId]
        if (currentRange == null) {
            bot.sendMessage(ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return null
        }
        return Pair(currentSheetName, currentRange)
    }

    private fun generateNewMessageText(filePath: String, sheetName: String, range: String, wordUz: String?, wordRus: String?, bot: Bot, chatId: Long): String? {
        println("nouns3 generateNewMessageText –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Excel")
        return try {
            generateMessageFromRange(filePath, sheetName, range, wordUz, wordRus, showHint = false)
        } catch (e: Exception) {
            bot.sendMessage(ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            null
        }
    }

    private fun getMainMessageId(chatId: Long): String? {
        println("nouns3 getMainMessageId –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chatId")
        return Globals.userMainMessageId[chatId]?.toString()
    }

    private fun updateMessage(chatId: Long, mainMessageId: String, newMessageText: String, wordUz: String?, wordRus: String?) {
        println("nouns3 updateMessage –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π")
        val replacedMessageText = newMessageText.replace("#", "$wordRus - $wordUz")
        GlobalScope.launch {
            TelegramMessageService.editMessageTextViaHttpSuspend(
                chatId = chatId,
                messageId = mainMessageId.toLong(),
                text = replacedMessageText,
                replyMarkupJson = Gson().toJson(Keyboards.buttonNextChengeWord(wordUz, wordRus))
            )
        }
    }
}