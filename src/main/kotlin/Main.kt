// Main.kt

package com.github.kotlintelegrambot.dispatcher
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import org.apache.poi.ss.usermodel.WorkbookFactory
import java.io.File
import kotlin.random.Random
import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.dispatcher.generateUsersButton
import com.github.kotlintelegrambot.entities.KeyboardReplyMarkup
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Sheet
import com.github.kotlintelegrambot.entities.ParseMode
import org.apache.poi.ss.usermodel.CellType
import org.apache.poi.ss.usermodel.Row
import java.io.FileOutputStream

val caseRanges = mapOf(
    "–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A1-A4", "B1-B7", "C1-C7", "D1-D7", "E1-E7"),
    "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A8-A9", "B8-B14", "C8-C14", "D8-D14", "E8-E14"),
    "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A15-A21", "B15-B21", "C15-C21", "D15-D21", "E15-E21"),
    "–î–∞—Ç–µ–ª—å–Ω—ã–π" to listOf("A22-A28", "B22-B28", "C22-C28", "D22-D28", "E22-E28"),
    "–ú–µ—Å—Ç–Ω—ã–π" to listOf("A29-A35", "B29-B35", "C29-C35", "D29-D35", "E29-E35"),
    "–ò—Å—Ö–æ–¥–Ω—ã–π" to listOf("A36-A42", "B36-B42", "C36-C42", "D36-D42", "E36-E42")
)

val userStates = mutableMapOf<Long, Int>()
val userCases = mutableMapOf<Long, String>() // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
val userWords = mutableMapOf<Long, Pair<String, String>>() // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
val tableFile = "–ê–ª–≥–æ—Ä–∏—Ç–º 3.3.xlsx"

fun main() {

    val bot = bot {
        token = "7166917752:AAF0q8pmZBAmgUy_qYUMuR1gJBLaD36VSCE"

        dispatch {
            command("start") {
                val userId = message.chat.id
                println("üîç –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
                userStates[userId] = 0
                userWords.remove(userId) // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–µ
                sendWelcomeMessage(userId, bot)
                sendCaseSelection(userId, bot, tableFile) // –î–æ–±–∞–≤–ª—è–µ–º tableFile –∫–∞–∫ filePath
            }

            callbackQuery {
                val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
                val data = callbackQuery.data ?: return@callbackQuery
                println("üîç –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId, –¥–∞–Ω–Ω—ã–µ: $data")

                println("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery: $data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")

                when {
                    data.startsWith("case:") -> {
                        val selectedCase = data.removePrefix("case:")
                        println("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂: $selectedCase")
                        userCases[chatId] = selectedCase
                        bot.sendMessage(
                            chatId = ChatId.fromId(chatId),
                            text = "–í—ã –≤—ã–±—Ä–∞–ª–∏: $selectedCase."
                        )
                        if (userWords.containsKey(chatId)) {
                            val (wordUz, wordRus) = userWords[chatId]!!
                            userStates[chatId] = 0
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–ù–∞—á–Ω–µ–º —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞: $wordUz ($wordRus)."
                            )
                            sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
                        } else {
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ."
                            )
                            sendWordMessage(chatId, bot, tableFile)
                        }
                    }
                    data.startsWith("word:") -> {
                        println("üîç –í—ã–±–æ—Ä —Å–ª–æ–≤–∞: $data")
                        val (wordUz, wordRus) = extractWordsFromCallback(data)
                        println("‚úÖ –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: $wordUz ($wordRus)")
                        userWords[chatId] = Pair(wordUz, wordRus)
                        userStates[chatId] = 0
                        sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
                    }
                    data.startsWith("next:") -> {
                        println("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ': $data")
                        val params = data.removePrefix("next:").split(":")
                        if (params.size == 2) {
                            val wordUz = params[0]
                            val wordRus = params[1]
                            val currentState = userStates[chatId] ?: 0
                            println("üîé –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $currentState. –û–±–Ω–æ–≤–ª—è–µ–º.")
                            userStates[chatId] = currentState + 1
                            sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
                        }
                    }
                    data.startsWith("repeat:") -> {
                        println("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': $data")
                        val params = data.removePrefix("repeat:").split(":")
                        if (params.size == 2) {
                            val wordUz = params[0]
                            val wordRus = params[1]
                            userStates[chatId] = 0
                            sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
                        }
                    }
                    data == "change_word" -> {
                        println("üîç –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
                        userStates[chatId] = 0
                        sendWordMessage(chatId, bot, tableFile)
                    }
                    data == "change_case" -> {
                        println("üîç –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –ø–∞–¥–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
                        sendCaseSelection(chatId, bot, tableFile)
                    }
                    data == "reset" -> {
                        println("üîç –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
                        userWords.remove(chatId)
                        userCases.remove(chatId)
                        userStates.remove(chatId)
                        sendCaseSelection(chatId, bot, tableFile)
                    }
                    data == "test" -> {
                        println("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
                        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–¢–µ—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
                    }
                    else -> {
                        println("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callbackQuery: $data")
                    }
                }
            }
        }
    }

    bot.startPolling()
}
// sendCaseSelection: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–∞.
fun sendCaseSelection(chatId: Long, bot: Bot, filePath: String) {
    println("üîç –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
    val showNextStep = checkUserState(chatId, filePath)
    println("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥': $showNextStep")

    val buttons = mutableListOf(
        listOf(InlineKeyboardButton.CallbackData("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "case:–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "case:–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "case:–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "case:–î–∞—Ç–µ–ª—å–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–ú–µ—Å—Ç–Ω—ã–π –ø–∞–¥–µ–∂", "case:–ú–µ—Å—Ç–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–ò—Å—Ö–æ–¥–Ω—ã–π –ø–∞–¥–µ–∂", "case:–ò—Å—Ö–æ–¥–Ω—ã–π"))
    )

    if (showNextStep) {
        println("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥'")
        buttons.add(listOf(InlineKeyboardButton.CallbackData("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", "next_step")))
    }

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–¥–µ–∂ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
        replyMarkup = InlineKeyboardMarkup.create(buttons)
    )
}



// sendWelcomeMessage: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π /start.
fun sendWelcomeMessage(chatId: Long, bot: Bot) {
    val keyboardMarkup = KeyboardReplyMarkup(
        keyboard = generateUsersButton(),
        resizeKeyboard = true
    )
    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∏–∑—É—á–∞—Ç—å —É–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫!""",
        replyMarkup = keyboardMarkup
    )
}

// generateUsersButton: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É /start –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
fun generateUsersButton(): List<List<KeyboardButton>> {
    return listOf(
        listOf(KeyboardButton("/start"))
    )
}

// sendWordMessage: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤.
fun sendWordMessage(chatId: Long, bot: Bot, filePath: String) {
    if (!File(filePath).exists()) {
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return
    }

    val inlineKeyboard = try {
        createWordSelectionKeyboardFromExcel(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ")
    } catch (e: Exception) {
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}"
        )
        return
    }

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        replyMarkup = inlineKeyboard
    )
}

// createWordSelectionKeyboardFromExcel: –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ Excel-—Ñ–∞–π–ª–µ.
fun createWordSelectionKeyboardFromExcel(filePath: String, sheetName: String): InlineKeyboardMarkup {
    println("üîç –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞: $filePath, –ª–∏—Å—Ç: $sheetName")

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    println("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ $filePath")
    val file = File(filePath)
    if (!file.exists()) {
        println("‚ùå –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }
    println("‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: $filePath")

    // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞
    println("üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel")
    val workbook = WorkbookFactory.create(file)
    val sheet = workbook.getSheet(sheetName)
        ?: throw IllegalArgumentException("‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
    println("‚úÖ –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")

    println("üìú –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${sheet.lastRowNum + 1}")

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    println("üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫")
    val randomRows = (1..sheet.lastRowNum).shuffled().take(10)
    println("üé≤ –í—ã–±—Ä–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏: $randomRows")

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    println("üî® –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫")
    val buttons = randomRows.mapNotNull { rowIndex ->
        val row = sheet.getRow(rowIndex)
        if (row == null) {
            println("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return@mapNotNull null
        }

        val wordUz = row.getCell(0)?.toString()?.trim()
        val wordRus = row.getCell(1)?.toString()?.trim()

        if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
            println("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: wordUz = $wordUz, wordRus = $wordRus. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return@mapNotNull null
        }

        println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ $rowIndex: wordUz = $wordUz, wordRus = $wordRus")
        InlineKeyboardButton.CallbackData("$wordUz - $wordRus", "word:($wordUz - $wordRus)")
    }.chunked(2) // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ

    println("‚úÖ –ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫: ${buttons.size}")

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
    println("üìï –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel")
    workbook.close()
    println("‚úÖ –§–∞–π–ª Excel —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    println("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return InlineKeyboardMarkup.create(buttons)
}

// extractWordsFromCallback: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–∑–±–µ–∫—Å–∫–æ–µ –∏ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ callback data.
fun extractWordsFromCallback(data: String): Pair<String, String> {
    val content = data.substringAfter("word:(").substringBefore(")")
    val wordUz = content.substringBefore(" - ").trim()
    val wordRus = content.substringAfter(" - ").trim()
    return wordUz to wordRus
}

// sendStateMessage: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏ –ø–∞–¥–µ–∂—É.
fun sendStateMessage(chatId: Long, bot: Bot, filePath: String, wordUz: String, wordRus: String) {
    println("üîç –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId, —Å–ª–æ–≤–æ: $wordUz, –ø–µ—Ä–µ–≤–æ–¥: $wordRus")

    val selectedCase = userCases[chatId]
    if (selectedCase == null) {
        println("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–¥–µ–∂.")
        return
    }

    println("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂: $selectedCase")

    val rangesForCase = caseRanges[selectedCase]
    if (rangesForCase == null) {
        println("‚ùå –û—à–∏–±–∫–∞: –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞ $selectedCase –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    }

    val currentState = userStates[chatId] ?: 0
    println("üîé –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $currentState")

    if (currentState >= rangesForCase.size) {
        println("‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞: $selectedCase")
        addScoreForCase(chatId, selectedCase, filePath)
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
        return
    }

    val range = rangesForCase[currentState]
    println("üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: $range")

    val messageText = try {
        generateMessageFromRange(filePath, "–ü—Ä–∏–º–µ—Ä—ã –≥–∞–º–º –¥–ª—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã", range, wordUz, wordRus)
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    }

    println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    if (currentState == rangesForCase.size - 1) {
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2
        )
        println("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.")
        addScoreForCase(chatId, selectedCase, filePath)
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
    } else {
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2,
            replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next:$wordUz:$wordRus")
            )
        )
    }
}

// sendFinalButtons: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.
fun sendFinalButtons(chatId: Long, bot: Bot, wordUz: String, wordRus: String, filePath: String) {
    println("üîç –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
    val showNextStep = checkUserState(chatId, filePath) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    println("üîé –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥': $showNextStep")

    val buttons = mutableListOf(
        listOf(InlineKeyboardButton.CallbackData("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "repeat:$wordUz:$wordRus")),
        listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", "change_word")),
        listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–¥–µ–∂", "change_case")),
        listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–¥–µ–∂ –∏ —Å–ª–æ–≤–æ", "reset"))
    )

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    if (showNextStep) {
        println("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥'")
        buttons.add(listOf(InlineKeyboardButton.CallbackData("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", "next_step")))
    }

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∏ –ø–∞–¥–µ–∂–æ–º. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        replyMarkup = InlineKeyboardMarkup.create(buttons)
    )
}

// generateMessageFromRange: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫ Excel.
fun generateMessageFromRange(filePath: String, sheetName: String, range: String, wordUz: String, wordRus: String): String {
    val file = File(filePath)
    val workbook = WorkbookFactory.create(file)
    val sheet = workbook.getSheet(sheetName)
        ?: throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
    val cells = extractCellsFromRange(sheet, range)

    val firstCell = cells.firstOrNull()?.toString()?.replace("\n\n", "\n")?.trim()?.escapeMarkdownV2() ?: ""
    val blurredFirstCell = if (firstCell.isNotBlank()) "||$firstCell||" else ""

    val specificRowsForE = setOf(8, 9, 12, 13, 18, 19, 20, 25, 26, 27, 31, 32, 36, 38, 40)
    val messageBody = cells.drop(1).joinToString("\n") { cell ->
        val content = cell.toString().replace("*", wordUz)
        if (cell.columnIndex == 2 || (cell.columnIndex == 4 && specificRowsForE.contains(cell.rowIndex))) {
            adjustWordUz(content, wordUz)
        } else {
            content
        }.replace("`", "\\`")
    }

    workbook.close()
    return listOf(blurredFirstCell, messageBody).filter { it.isNotBlank() }.joinToString("\n\n")
}

// escapeMarkdownV2: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown.
fun String.escapeMarkdownV2(): String {
    return this.replace("\\", "\\\\")
        .replace("_", "\\_")
        .replace("*", "\\*")
        .replace("[", "\\[")
        .replace("]", "\\]")
        .replace("(", "\\(")
        .replace(")", "\\)")
        .replace("~", "\\~")
        .replace("`", "\\`")
        .replace(">", "\\>")
        .replace("#", "\\#")
        .replace("+", "\\+")
        .replace("-", "\\-")
        .replace("=", "\\=")
        .replace("|", "\\|")
        .replace("{", "\\{")
        .replace("}", "\\}")
        .replace(".", "\\.")
        .replace("!", "\\!")
}

// adjustWordUz: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —É–∑–±–µ–∫—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
fun adjustWordUz(content: String, wordUz: String): String {
    val vowels = "aeiou–∞–æ–∏–µ—ë—É"
    val lastChar = wordUz.lastOrNull()?.lowercaseChar()
    val nextChar = content.substringAfter("+", "").firstOrNull()?.lowercaseChar()

    if (!content.contains("+")) {
        return content
    }

    val replacement = when {
        lastChar != null && nextChar != null &&
                lastChar in vowels && nextChar in vowels -> "s"
        lastChar != null && nextChar != null &&
                lastChar !in vowels && nextChar !in vowels -> "i"
        else -> ""
    }

    return content.replace("+", replacement).replace("*", wordUz)
}

// extractCellsFromRange: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —è—á–µ–π–∫–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–∏—Å—Ç–∞ Excel.
fun extractCellsFromRange(sheet: Sheet, range: String): List<Cell> {
    val (start, end) = range.split("-").map { it.replace(Regex("[A-Z]"), "").toInt() - 1 }
    val column = range[0] - 'A'

    return (start..end).mapNotNull { rowIndex ->
        val row = sheet.getRow(rowIndex)
        row?.getCell(column)
    }
}

fun checkUserState(userId: Long, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"): Boolean {
    println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID: $userId, –§–∞–π–ª: $filePath, –õ–∏—Å—Ç: $sheetName")

    val file = File(filePath)
    var userRow: Row? = null
    var allCompleted = false

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName) ?: throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
        println("‚úÖ –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")

        // –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        println("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏")
        for (rowIndex in 1..sheet.lastRowNum.coerceAtLeast(1)) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            val row = sheet.getRow(rowIndex) ?: sheet.createRow(rowIndex) // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            val idCell = row.getCell(0) ?: row.createCell(0) // –°–æ–∑–¥–∞—ë–º —è—á–µ–π–∫—É ID, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

            // –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ID
            val currentId = when (idCell.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong() // –ü—Ä–∏–≤–æ–¥–∏–º Double –∫ Long
                CellType.STRING -> idCell.stringCellValue.toLongOrNull() // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É –∫ Long
                else -> null
            }
            println("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É: ${rowIndex + 1}, ID: $currentId")

            // –ï—Å–ª–∏ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏
            if (currentId == userId) {
                println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ: ${rowIndex + 1}")
                userRow = row
                break
            }

            // –ï—Å–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (currentId == null || currentId == 0L) {
                println("‚ö†Ô∏è –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                idCell.setCellValue(userId.toDouble()) // –Ø–≤–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ Double
                for (i in 1..6) {
                    row.createCell(i).setCellValue(0.0) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
                safelySaveWorkbook(workbook, filePath) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É: ${rowIndex + 1}")
                return false // –ù–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ "–°–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É" –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
            }
        }

        // –ï—Å–ª–∏ ID –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏
        if (userRow != null) {
            println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö –ò–º., –†–æ–¥., –í–∏–Ω., –î–∞—Ç., –ú–µ—Å—Ç., –ò—Å—Ö.")
            allCompleted = (1..6).all { index ->
                val cell = userRow!!.getCell(index)
                val value = cell?.toString()?.toDoubleOrNull() ?: 0.0
                println("üîé –ö–æ–ª–æ–Ω–∫–∞ ${index + 1}: –∑–Ω–∞—á–µ–Ω–∏–µ = $value")
                value > 0
            }
        } else {
            // –ï—Å–ª–∏ –º—ã –ø—Ä–æ—à–ª–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ –Ω–∞—à–ª–∏ ID, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            val newRowIndex = sheet.physicalNumberOfRows
            val newRow = sheet.createRow(newRowIndex)
            newRow.createCell(0).setCellValue(userId.toDouble()) // ID –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
            for (i in 1..6) {
                newRow.createCell(i).setCellValue(0.0) // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            safelySaveWorkbook(workbook, filePath) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É: ${newRowIndex + 1}")
            return false // –ù–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ "–°–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É" –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
        }
    }

    println("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: $allCompleted")
    return allCompleted
}



fun safelySaveWorkbook(workbook: org.apache.poi.ss.usermodel.Workbook, filePath: String) {
    val tempFile = File("${filePath}.tmp")
    try {
        FileOutputStream(tempFile).use { outputStream ->
            workbook.write(outputStream)
        }
        val originalFile = File(filePath)
        if (originalFile.exists()) {
            if (!originalFile.delete()) {
                throw IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: $filePath")
            }
        }
        if (!tempFile.renameTo(originalFile)) {
            throw IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile.path}")
        }
        println("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $filePath")
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${e.message}")
        tempFile.delete() // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        throw e
    }
}

fun addScoreForCase(userId: Long, case: String, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") {
    println("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $userId, –ü–∞–¥–µ–∂: $case")

    val file = File(filePath)
    if (!file.exists()) {
        println("‚ùå –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    }

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName) ?: throw IllegalArgumentException("‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
        println("‚úÖ –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–∞–¥–µ–∂–∞
        val caseColumnIndex = when (case) {
            "–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" -> 1
            "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" -> 2
            "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" -> 3
            "–î–∞—Ç–µ–ª—å–Ω—ã–π" -> 4
            "–ú–µ—Å—Ç–Ω—ã–π" -> 5
            "–ò—Å—Ö–æ–¥–Ω—ã–π" -> 6
            else -> throw IllegalArgumentException("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–¥–µ–∂: $case")
        }

        println("üîé –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId –≤ —Ç–∞–±–ª–∏—Ü–µ...")
        for (rowIndex in 1..sheet.lastRowNum) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            val row = sheet.getRow(rowIndex) ?: continue
            val idCell = row.getCell(0)
            val currentId = when (idCell?.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong() // –ü—Ä–∏–≤–æ–¥–∏–º Double –∫ Long
                CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong() // –°–Ω–∞—á–∞–ª–∞ –≤ Double, –∑–∞—Ç–µ–º –≤ Long
                else -> null
            }

            if (currentId == userId) {
                println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}")
                val caseCell = row.getCell(caseColumnIndex) ?: row.createCell(caseColumnIndex)
                val currentScore = caseCell.numericCellValue.takeIf { it > 0 } ?: 0.0
                println("üîé –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: $currentScore")
                caseCell.setCellValue(currentScore + 1)
                println("‚úÖ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentScore + 1}")
                safelySaveWorkbook(workbook, filePath)
                println("‚úÖ –ë–∞–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                return
            }
        }
        println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.")
    }
}
