// Main.kt

package com.github.kotlintelegrambot.dispatcher
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import org.apache.poi.ss.usermodel.WorkbookFactory
import java.io.File
import kotlin.random.Random
import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.dispatcher.generateUsersButton
import com.github.kotlintelegrambot.entities.KeyboardReplyMarkup
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Sheet
import com.github.kotlintelegrambot.entities.ParseMode
import org.apache.poi.hssf.usermodel.HSSFFont
import org.apache.poi.ss.usermodel.CellType
import org.apache.poi.ss.usermodel.IndexedColors
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.xssf.usermodel.XSSFColor
import org.apache.poi.xssf.usermodel.XSSFFont
import org.apache.poi.xssf.usermodel.XSSFRichTextString
import java.io.FileOutputStream
import kotlin.experimental.and


val caseRanges = mapOf(
    "–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A1-A7", "B1-B7", "C1-C7", "D1-D7", "E1-E7"),
    "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A8-A14", "B8-B14", "C8-C14", "D8-D14", "E8-E14"),
    "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A15-A21", "B15-B21", "C15-C21", "D15-D21", "E15-E21"),
    "–î–∞—Ç–µ–ª—å–Ω—ã–π" to listOf("A22-A28", "B22-B28", "C22-C28", "D22-D28", "E22-E28"),
    "–ú–µ—Å—Ç–Ω—ã–π" to listOf("A29-A35", "B29-B35", "C29-C35", "D29-D35", "E29-E35"),
    "–ò—Å—Ö–æ–¥–Ω—ã–π" to listOf("A36-A42", "B36-B42", "C36-C42", "D36-D42", "E36-E42")
)

val userStates = mutableMapOf<Long, Int>()
val userCases = mutableMapOf<Long, String>() // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
val userWords = mutableMapOf<Long, Pair<String, String>>() // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
val userBlocks = mutableMapOf<Long, Int>() // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

val tableFile = "–ê–ª–≥–æ—Ä–∏—Ç–º 3.6.xlsx"

fun main() {

    val bot = bot {
        token = "7856005284:AAFVvPnRadWhaotjUZOmFyDFgUHhZ0iGsCo"

        dispatch {
            command("start") {
                val userId = message.chat.id
                println("1. üîç –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
                userStates[userId] = 0
                userWords.remove(userId) // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–µ
                sendWelcomeMessage(userId, bot)
                sendCaseSelection(userId, bot, tableFile) // –î–æ–±–∞–≤–ª—è–µ–º tableFile –∫–∞–∫ filePath
            }

            callbackQuery {
                val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
                val data = callbackQuery.data ?: return@callbackQuery
                println("2. üîç –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId, –¥–∞–Ω–Ω—ã–µ: $data")

                println("3. üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery: $data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")

                when {
                    data.startsWith("case:") -> {
                        val selectedCase = data.removePrefix("case:")
                        println("4. ‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂: $selectedCase")
                        userCases[chatId] = selectedCase
                        bot.sendMessage(
                            chatId = ChatId.fromId(chatId),
                            text = "–í—ã –≤—ã–±—Ä–∞–ª–∏: $selectedCase."
                        )
                        if (userWords.containsKey(chatId)) {
                            val (wordUz, wordRus) = userWords[chatId]!!
                            userStates[chatId] = 0
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–ù–∞—á–Ω–µ–º —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞: $wordUz ($wordRus)."
                            )
                            sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
                        } else {
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ."
                            )
                            sendWordMessage(chatId, bot, tableFile)
                        }
                    }
                    data.startsWith("word:") -> {
                        println("5. üîç –í—ã–±–æ—Ä —Å–ª–æ–≤–∞: $data")
                        val (wordUz, wordRus) = extractWordsFromCallback(data)
                        println("6. ‚úÖ –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: $wordUz ($wordRus)")
                        userWords[chatId] = Pair(wordUz, wordRus)
                        userStates[chatId] = 0
                        sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
                    }
                    data.startsWith("next:") -> {
                        println("7. üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ': $data")
                        val params = data.removePrefix("next:").split(":")
                        if (params.size == 2) {
                            val wordUz = params[0]
                            val wordRus = params[1]
                            val currentState = userStates[chatId] ?: 0
                            println("8. üîé –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $currentState. –û–±–Ω–æ–≤–ª—è–µ–º.")
                            userStates[chatId] = currentState + 1
                            sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
                        }
                    }
                    data.startsWith("repeat:") -> {
                        println("9. üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': $data")
                        val params = data.removePrefix("repeat:").split(":")
                        if (params.size == 2) {
                            val wordUz = params[0]
                            val wordRus = params[1]
                            userStates[chatId] = 0
                            sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
                        }
                    }
                    data == "change_word" -> {
                        println("10. üîç –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
                        userStates[chatId] = 0
                        sendWordMessage(chatId, bot, tableFile)
                    }
                    data == "change_case" -> {
                        println("11. üîç –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –ø–∞–¥–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
                        sendCaseSelection(chatId, bot, tableFile)
                    }
                    data == "reset" -> {
                        println("12. üîç –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
                        userWords.remove(chatId)
                        userCases.remove(chatId)
                        userStates.remove(chatId)
                        sendCaseSelection(chatId, bot, tableFile)
                    }
                    data == "test" -> {
                        println("13. üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")
                        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–¢–µ—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
                    }
                    data == "next_block" -> {
                        val currentBlock = userBlocks[chatId] ?: 1
                        if (currentBlock < 3) {
                            userBlocks[chatId] = currentBlock + 1
                            println("14. üîç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId. –ù–æ–≤—ã–π –±–ª–æ–∫: ${currentBlock + 1}")
                            sendCaseSelection(chatId, bot, tableFile)
                        } else {
                            val totalScore = calculateTotalScore(chatId, tableFile)
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –±–ª–æ–∫–∏. –°–µ–π—á–∞—Å —É –≤–∞—Å $totalScore –±–∞–ª–ª–æ–≤. –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ 50 –±–∞–ª–ª–æ–≤."
                            )
                        }
                    }

                    data == "prev_block" -> {
                        val currentBlock = userBlocks[chatId] ?: 1
                        if (currentBlock > 1) {
                            userBlocks[chatId] = currentBlock - 1
                            println("15. üîç –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId. –ù–æ–≤—ã–π –±–ª–æ–∫: ${currentBlock - 1}")
                            sendCaseSelection(chatId, bot, tableFile)
                        }
                    }
                    else -> {
                        println("16. ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callbackQuery: $data")
                    }
                }
            }
        }
    }

    bot.startPolling()
}
// sendCaseSelection: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–∞.
fun sendCaseSelection(chatId: Long, bot: Bot, filePath: String) {
    val currentBlock = userBlocks[chatId] ?: 1
    println("17. üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –≤—ã–±–∏—Ä–∞–µ—Ç –ø–∞–¥–µ–∂. –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: $currentBlock")

    val showNextStep = checkUserState(chatId, filePath, block = currentBlock)
    println("18. üîé –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥? $showNextStep")

    val buttons = mutableListOf(
        listOf(InlineKeyboardButton.CallbackData("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "case:–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "case:–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "case:–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "case:–î–∞—Ç–µ–ª—å–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–ú–µ—Å—Ç–Ω—ã–π –ø–∞–¥–µ–∂", "case:–ú–µ—Å—Ç–Ω—ã–π")),
        listOf(InlineKeyboardButton.CallbackData("–ò—Å—Ö–æ–¥–Ω—ã–π –ø–∞–¥–µ–∂", "case:–ò—Å—Ö–æ–¥–Ω—ã–π"))
    )

    if (currentBlock > 1) {
        println("19. üîô –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫'.")
        buttons.add(listOf(InlineKeyboardButton.CallbackData("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫", "prev_block")))
    }
    if (showNextStep) {
        println("20. üîú –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫'.")
        buttons.add(listOf(InlineKeyboardButton.CallbackData("–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫", "next_block")))
    }

    println("21. üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞–¥–µ–∂–∞.")
    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–¥–µ–∂ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞ $currentBlock:",
        replyMarkup = InlineKeyboardMarkup.create(buttons)
    )
}

// sendWelcomeMessage: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π /start.
fun sendWelcomeMessage(chatId: Long, bot: Bot) {
    println("22. üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId.")
    val keyboardMarkup = KeyboardReplyMarkup(
        keyboard = generateUsersButton(),
        resizeKeyboard = true
    )
    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∏–∑—É—á–∞—Ç—å —É–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫!""",
        replyMarkup = keyboardMarkup
    )
}

// generateUsersButton: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É /start –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
fun generateUsersButton(): List<List<KeyboardButton>> {
    println("23. üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ /start.")
    return listOf(
        listOf(KeyboardButton("/start"))
    )
}

// sendWordMessage: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤.
fun sendWordMessage(chatId: Long, bot: Bot, filePath: String) {
    println("24. üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId.")
    if (!File(filePath).exists()) {
        println("25. ‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return
    }

    val inlineKeyboard = try {
        println("26. üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ $filePath.")
        createWordSelectionKeyboardFromExcel(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ")
    } catch (e: Exception) {
        println("27. ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: ${e.message}")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}"
        )
        return
    }

    println("28. üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.")
    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        replyMarkup = inlineKeyboard
    )
}


// createWordSelectionKeyboardFromExcel: –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ Excel-—Ñ–∞–π–ª–µ.
// createWordSelectionKeyboardFromExcel: –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ Excel-—Ñ–∞–π–ª–µ.
fun createWordSelectionKeyboardFromExcel(filePath: String, sheetName: String): InlineKeyboardMarkup {
    println("29. üîç –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞: $filePath, –ª–∏—Å—Ç: $sheetName")

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    println("30. üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ $filePath")
    val file = File(filePath)
    if (!file.exists()) {
        println("31. ‚ùå –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }
    println("32. ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: $filePath")

    // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞
    println("33. üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel")
    val workbook = WorkbookFactory.create(file)
    val sheet = workbook.getSheet(sheetName)
        ?: throw IllegalArgumentException("34. ‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
    println("35. ‚úÖ –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")

    println("36. üìú –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${sheet.lastRowNum + 1}")

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    println("37. üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫")
    val randomRows = (1..sheet.lastRowNum).shuffled().take(10)
    println("38. üé≤ –í—ã–±—Ä–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏: $randomRows")

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    println("39. üî® –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫")
    val buttons = randomRows.mapNotNull { rowIndex ->
        val row = sheet.getRow(rowIndex)
        if (row == null) {
            println("40. ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return@mapNotNull null
        }

        val wordUz = row.getCell(0)?.toString()?.trim()
        val wordRus = row.getCell(1)?.toString()?.trim()

        if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
            println("41. ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: wordUz = $wordUz, wordRus = $wordRus. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return@mapNotNull null
        }

        println("42. ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ $rowIndex: wordUz = $wordUz, wordRus = $wordRus")
        InlineKeyboardButton.CallbackData("$wordUz - $wordRus", "word:($wordUz - $wordRus)")
    }.chunked(2) // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ

    println("43. ‚úÖ –ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫: ${buttons.size}")

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
    println("44. üìï –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel")
    workbook.close()
    println("45. ‚úÖ –§–∞–π–ª Excel —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    println("46. üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return InlineKeyboardMarkup.create(buttons)
}

// extractWordsFromCallback: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–∑–±–µ–∫—Å–∫–æ–µ –∏ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ callback data.
fun extractWordsFromCallback(data: String): Pair<String, String> {
    println("47. üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ callback data: $data")
    val content = data.substringAfter("word:(").substringBefore(")")
    val wordUz = content.substringBefore(" - ").trim()
    val wordRus = content.substringAfter(" - ").trim()
    println("48. ‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: wordUz = $wordUz, wordRus = $wordRus")
    return wordUz to wordRus
}

// sendStateMessage: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏ –ø–∞–¥–µ–∂—É.
fun sendStateMessage(chatId: Long, bot: Bot, filePath: String, wordUz: String, wordRus: String) {
    println("49. üîç –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId, —Å–ª–æ–≤–æ: $wordUz, –ø–µ—Ä–µ–≤–æ–¥: $wordRus")

    val selectedCase = userCases[chatId]
    if (selectedCase == null) {
        println("50. ‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–¥–µ–∂.")
        return
    }

    println("51. ‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂: $selectedCase")

    val rangesForCase = caseRanges[selectedCase]
    if (rangesForCase == null) {
        println("52. ‚ùå –û—à–∏–±–∫–∞: –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞ $selectedCase –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    }

    val currentState = userStates[chatId] ?: 0
    println("53. üîé –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $currentState")

    if (currentState >= rangesForCase.size) {
        println("54. ‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞: $selectedCase")
        addScoreForCase(chatId, selectedCase, filePath)
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
        return
    }

    val range = rangesForCase[currentState]
    println("55. üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: $range")
    val listName: String = "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 2"
    val messageText = try {
        generateMessageFromRange(filePath, listName, range, wordUz, wordRus)
    } catch (e: Exception) {
        println("56. ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    }

    println("57. ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    if (currentState == rangesForCase.size - 1) {
        println("571 $messageText")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2
        )
        println("58. ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.")
        val currentBlock = userBlocks[chatId] ?: 1
        println("59. ‚úÖ –£—Ç–æ—á–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        addScoreForCase(chatId, selectedCase, filePath, currentBlock)
        println("60. ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞.")
        println("61. ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é...")
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
        println("62. ‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    } else {
        println("572 $messageText")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2,
            replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next:$wordUz:$wordRus")
            )
        )
    }
}


// sendFinalButtons: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.
fun sendFinalButtons(chatId: Long, bot: Bot, wordUz: String, wordRus: String, filePath: String) {
    println("92. üîç –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
    val showNextStep = checkUserState(chatId, filePath) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    println("93. üîé –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫': $showNextStep")

    val buttons = mutableListOf(
        listOf(InlineKeyboardButton.CallbackData("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "repeat:$wordUz:$wordRus")),
        listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", "change_word")),
        listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–¥–µ–∂", "change_case")),
        listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–¥–µ–∂ –∏ —Å–ª–æ–≤–æ", "reset"))
    )

    if (showNextStep) {
        println("94. ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫'")
        buttons.add(listOf(InlineKeyboardButton.CallbackData("–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫", "next_block")))
    }

    println("95. üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –º–µ–Ω—é.")
    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∏ –ø–∞–¥–µ–∂–æ–º. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        replyMarkup = InlineKeyboardMarkup.create(buttons)
    )
}

fun generateMessageFromRange(filePath: String, sheetName: String, range: String, wordUz: String, wordRus: String): String {
    println("96. üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –§–∞–π–ª: $filePath, –õ–∏—Å—Ç: $sheetName, –î–∏–∞–ø–∞–∑–æ–Ω: $range, –°–ª–æ–≤–∞: $wordUz, $wordRus.")
    val file = File(filePath)
    if (!file.exists()) {
        println("97. ‚ùå –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    val workbook = WorkbookFactory.create(file)
    val sheet = workbook.getSheet(sheetName)
    if (sheet == null) {
        println("98. ‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }
    println("99. ‚úÖ –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —è—á–µ–µ–∫.")

    val cells = extractCellsFromRange(sheet, range, wordUz)
    println("100. üìú –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: $cells")

    val firstCell = cells.firstOrNull()?.escapeMarkdownV2() ?: ""
    val blurredFirstCell = if (firstCell.isNotBlank()) "||$firstCell||" else ""
    println("101. üîë –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: \"$firstCell\", –ó–∞–±–ª—é—Ä–µ–Ω–Ω—ã–π: \"$blurredFirstCell\"")

    val messageBody = cells.drop(1).joinToString("\n")
    println("102. üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:\n$messageBody")

    workbook.close()
    println("103. üìï –§–∞–π–ª –∑–∞–∫—Ä—ã—Ç. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return listOf(blurredFirstCell, messageBody).filter { it.isNotBlank() }.joinToString("\n\n")
}

fun String.escapeMarkdownV2(): String {
    println("üîß –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown –¥–ª—è —Å—Ç—Ä–æ–∫–∏: \"$this\"")
    return this.replace("\\", "\\\\")
        .replace("_", "\\_")
        .replace("*", "\\*")
        .replace("[", "\\[")
        .replace("]", "\\]")
        .replace("(", "\\(") // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        .replace(")", "\\)") // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        .replace("~", "\\~")
        .replace("`", "\\`")
        .replace(">", "\\>")
        .replace("#", "\\#")
        .replace("+", "\\+")
        .replace("-", "\\-")
        .replace("=", "\\=")
        .replace("|", "\\|")
        .replace("{", "\\{")
        .replace("}", "\\}")
        .replace(".", "\\.")
        .replace("!", "\\!")
}


fun adjustWordUz(content: String, wordUz: String): String {
    println("105. üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞ \"$wordUz\" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ \"$content\"")

    if (content.contains("+")) {
        val replacement = "s" // –ü—Ä–∏–º–µ—Ä –¥–ª—è –ª–æ–≥–∏–∫–∏ `+`. –ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
        println("106. üîß –ù–∞–π–¥–µ–Ω '+'. –ó–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ \"$replacement\".")
        return content.replace("+", replacement).replace("*", wordUz)
    }

    if (content.contains("*")) {
        println("107. üîß –ù–∞–π–¥–µ–Ω '*'. –ó–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ \"$wordUz\".")
        return content.replace("*", wordUz)
    }

    println("108. üîé –°–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return content
}

// extractCellsFromRange: –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —è—á–µ–π–∫–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–∏—Å—Ç–∞ Excel.
fun extractCellsFromRange(sheet: Sheet, range: String, wordUz: String): List<String> {
    println("108. üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —è—á–µ–µ–∫ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ $range –¥–ª—è —Å–ª–æ–≤–∞ \"$wordUz\"")
    val (start, end) = range.split("-").map { it.replace(Regex("[A-Z]"), "").toInt() - 1 }
    val column = range[0] - 'A'
    println("109. üìå –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫: $start-$end, –ö–æ–ª–æ–Ω–∫–∞: $column")

    return (start..end).mapNotNull { rowIndex ->
        val row = sheet.getRow(rowIndex)
        if (row == null) {
            println("110. ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return@mapNotNull null
        }
        val cell = row.getCell(column)
        if (cell == null) {
            println("111. ‚ö†Ô∏è –Ø—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return@mapNotNull null
        }
        val processed = processCellContent(cell, wordUz)
        println("112. ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: \"$processed\"")
        processed
    }
}

fun checkUserState(userId: Long, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" ): Boolean {
    println("113. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID: $userId, –§–∞–π–ª: $filePath, –õ–∏—Å—Ç: $sheetName")

    val file = File(filePath)
    var userRow: Row? = null
    var allCompleted = false

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName)
            ?: throw IllegalArgumentException("114. ‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
        println("115. ‚úÖ –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")

        println("116. üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏")
        for (rowIndex in 1..sheet.lastRowNum.coerceAtLeast(1)) {
            val row = sheet.getRow(rowIndex) ?: sheet.createRow(rowIndex)
            val idCell = row.getCell(0) ?: row.createCell(0)

            val currentId = when (idCell.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toLongOrNull()
                else -> null
            }
            println("117. üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É: ${rowIndex + 1}, ID: $currentId")

            if (currentId == userId) {
                println("118. ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ: ${rowIndex + 1}")
                userRow = row
                break
            }

            if (currentId == null || currentId == 0L) {
                println("119. ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                idCell.setCellValue(userId.toDouble())
                for (i in 1..6) {
                    row.createCell(i).setCellValue(0.0)
                }
                safelySaveWorkbook(workbook, filePath)
                println("120. ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É: ${rowIndex + 1}")
                return false
            }
        }

        if (userRow != null) {
            println("121. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö –ò–º., –†–æ–¥., –í–∏–Ω., –î–∞—Ç., –ú–µ—Å—Ç., –ò—Å—Ö.")
            allCompleted = (1..6).all { index ->
                val cell = userRow!!.getCell(index)
                val value = cell?.toString()?.toDoubleOrNull() ?: 0.0
                println("122. üîé –ö–æ–ª–æ–Ω–∫–∞ ${index + 1}: –∑–Ω–∞—á–µ–Ω–∏–µ = $value")
                value > 0
            }
        } else {
            val newRowIndex = sheet.physicalNumberOfRows
            val newRow = sheet.createRow(newRowIndex)
            newRow.createCell(0).setCellValue(userId.toDouble())
            for (i in 1..6) {
                newRow.createCell(i).setCellValue(0.0)
            }
            safelySaveWorkbook(workbook, filePath)
            println("123. ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É: ${newRowIndex + 1}")
            return false
        }
    }

    println("124. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: $allCompleted")
    return allCompleted
}

fun safelySaveWorkbook(workbook: org.apache.poi.ss.usermodel.Workbook, filePath: String) {
    val tempFile = File("${filePath}.tmp")
    println("125. üìÇ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile.path}")

    try {
        FileOutputStream(tempFile).use { outputStream ->
            println("126. üíæ –ü–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile.path}")
            workbook.write(outputStream)
        }
        println("127. ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")

        val originalFile = File(filePath)
        println("128. üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${originalFile.path}")
        if (originalFile.exists()) {
            println("129. üóëÔ∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª—è–µ–º: ${originalFile.path}")
            if (!originalFile.delete()) {
                println("130. ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${originalFile.path}")
                throw IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: $filePath")
            }
            println("131. ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        }

        println("132. üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π: ${tempFile.path} -> ${originalFile.path}")
        if (!tempFile.renameTo(originalFile)) {
            println("133. ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile.path}")
            throw IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile.path}")
        }
        println("134. ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $filePath")
    } catch (e: Exception) {
        println("135. ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${e.message}")
        println("136. üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile.path}")
        tempFile.delete()
        throw e
    }
}



fun addScoreForCase(userId: Long, case: String, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") {
    println("163. üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $userId, –ü–∞–¥–µ–∂: $case")

    val file = File(filePath)
    if (!file.exists()) {
        println("164. ‚ùå –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    }

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName)
            ?: throw IllegalArgumentException("165. ‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
        println("166. ‚úÖ –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")

        val caseColumnIndex = when (case) {
            "–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" -> 1
            "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" -> 2
            "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" -> 3
            "–î–∞—Ç–µ–ª—å–Ω—ã–π" -> 4
            "–ú–µ—Å—Ç–Ω—ã–π" -> 5
            "–ò—Å—Ö–æ–¥–Ω—ã–π" -> 6
            else -> throw IllegalArgumentException("167. ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–¥–µ–∂: $case")
        }

        println("168. üîé –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId –≤ —Ç–∞–±–ª–∏—Ü–µ...")
        for (rowIndex in 1..sheet.lastRowNum) {
            val row = sheet.getRow(rowIndex) ?: continue
            val idCell = row.getCell(0)
            val currentId = when (idCell?.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                else -> null
            }

            println("169. üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex + 1}: ID = $currentId.")
            if (currentId == userId) {
                println("170. ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}")
                val caseCell = row.getCell(caseColumnIndex) ?: row.createCell(caseColumnIndex)
                val currentScore = caseCell.numericCellValue.takeIf { it > 0 } ?: 0.0
                println("171. üîé –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: $currentScore")
                caseCell.setCellValue(currentScore + 1)
                println("172. ‚úÖ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentScore + 1}")
                safelySaveWorkbook(workbook, filePath)
                println("173. ‚úÖ –ë–∞–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                return
            }
        }
        println("174. ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.")
    }
}

fun checkUserState(userId: Long, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", block: Int = 1): Boolean {
    println("175. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID: $userId, —Ñ–∞–π–ª: $filePath, –ª–∏—Å—Ç: $sheetName, –±–ª–æ–∫: $block.")

    val columnRanges = mapOf(
        1 to (1..6),
        2 to (7..12),
        3 to (13..18)
    )
    val columns = columnRanges[block] ?: run {
        println("176. ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫: $block. –í–æ–∑–≤—Ä–∞—â–∞–µ–º false.")
        return false
    }

    println("177. ‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –±–ª–æ–∫–∞ $block: $columns.")

    val file = File(filePath)
    if (!file.exists()) {
        println("178. ‚ùå –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º false.")
        return false
    }

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName)
        if (sheet == null) {
            println("179. ‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º false.")
            return false
        }

        println("180. ‚úÖ –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω. –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${sheet.lastRowNum + 1}.")

        for (row in sheet) {
            val idCell = row.getCell(0) ?: continue
            val userIdFromCell = when (idCell.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                else -> null
            }

            println("181. üîé –°—Ç—Ä–æ–∫–∞ ${row.rowNum + 1}: ID –≤ —è—á–µ–π–∫–µ = $userIdFromCell.")
            if (userIdFromCell == userId) {
                println("182. ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π...")

                val allColumnsCompleted = columns.all { colIndex ->
                    val cell = row.getCell(colIndex)
                    val value = cell?.numericCellValue ?: 0.0
                    println("183. üìä –ö–æ–ª–æ–Ω–∫–∞ $colIndex: –∑–Ω–∞—á–µ–Ω–∏–µ = $value. –í—ã–ø–æ–ª–Ω–µ–Ω–æ? ${value > 0}")
                    value > 0
                }

                println("184. ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $allColumnsCompleted.")
                return allColumnsCompleted
            }
        }
    }

    println("185. ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º false.")
    return false
}


fun addScoreForCase(userId: Long, case: String, filePath: String, block: Int) {
    println("186. üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId. –ü–∞–¥–µ–∂: $case, –§–∞–π–ª: $filePath, –ë–ª–æ–∫: $block.")

    val columnRanges = mapOf(
        1 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 1, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 2, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 3, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 4, "–ú–µ—Å—Ç–Ω—ã–π" to 5, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 6),
        2 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 7, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 8, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 9, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 10, "–ú–µ—Å—Ç–Ω—ã–π" to 11, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 12),
        3 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 13, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 14, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 15, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 16, "–ú–µ—Å—Ç–Ω—ã–π" to 17, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 18)
    )

    val column = columnRanges[block]?.get(case)
    if (column == null) {
        println("187. ‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –±–ª–æ–∫–∞ $block –∏ –ø–∞–¥–µ–∂–∞ $case –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    }
    println("188. ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: $column.")

    val file = File(filePath)
    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if (sheet == null) {
            println("189. ‚ùå –û—à–∏–±–∫–∞: –õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        }
        println("190. ‚úÖ –õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–∞–π–¥–µ–Ω. –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${sheet.lastRowNum + 1}.")

        var userFound = false

        for (row in sheet) {
            val idCell = row.getCell(0)
            if (idCell == null) {
                println("191. ‚ö†Ô∏è –Ø—á–µ–π–∫–∞ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            }

            val idFromCell = try {
                idCell.numericCellValue.toLong()
            } catch (e: Exception) {
                println("192. ‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ID –∏–∑ —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}. –ó–Ω–∞—á–µ–Ω–∏–µ: ${idCell}.")
                continue
            }

            println("193. üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É ${row.rowNum + 1}. ID –≤ —è—á–µ–π–∫–µ: $idFromCell.")

            if (idFromCell == userId) {
                userFound = true
                println("194. ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}. –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                val targetCell = row.getCell(column) ?: row.createCell(column)
                val currentValue = targetCell.numericCellValue.takeIf { it > 0 } ?: 0.0
                println("195. üîé –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ $column: $currentValue.")

                targetCell.setCellValue(currentValue + 1)
                println("196. ‚úÖ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ $column: ${currentValue + 1}. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª.")

                safelySaveWorkbook(workbook, filePath)
                println("197. ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ $filePath.")
                return
            }
        }
        if (!userFound) {
            println("198. ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID $userId –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
        }
    }
}

fun calculateTotalScore(userId: Long, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"): Int {
    println("199. üîç –ù–∞—á–∞–ª–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å—á—ë—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId –≤ —Ñ–∞–π–ª–µ $filePath, –ª–∏—Å—Ç $sheetName.")
    val columnIndices = (1..18) // –í—Å–µ —Å—Ç–æ–ª–±—Ü—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –±–ª–æ–∫–∞–º (B-S)
    val file = File(filePath)

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName)
        if (sheet == null) {
            println("200. ‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0.")
            return 0
        }

        println("201. ‚úÖ –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ —Å—Ç—Ä–æ–∫.")
        for (row in sheet) {
            val idCell = row.getCell(0)
            val userIdFromCell = when (idCell?.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                else -> null
            }

            println("202. üîé –°—Ç—Ä–æ–∫–∞ ${row.rowNum + 1}: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —è—á–µ–π–∫–µ = $userIdFromCell.")
            if (userIdFromCell == userId) {
                val totalScore = columnIndices.sumOf { colIndex ->
                    val cell = row.getCell(colIndex)
                    val value = (cell?.numericCellValue ?: 0.0).toInt()
                    println("203. üìä –ö–æ–ª–æ–Ω–∫–∞ $colIndex: –∑–Ω–∞—á–µ–Ω–∏–µ = $value.")
                    value
                }
                println("204. ‚úÖ –û–±—â–∏–π —Å—á—ë—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $totalScore.")
                return totalScore
            }
        }
    }

    println("205. ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0.")
    return 0
}

// processCellContent: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ —Å —É—á—ë—Ç–æ–º —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–∏–º–≤–æ–ª–∞ `+`.
fun processCellContent(cell: Cell?, wordUz: String): String {
    println("206. üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏: $cell")
    if (cell == null) {
        println("207. ‚ö†Ô∏è –Ø—á–µ–π–∫–∞ –ø—É—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.")
        return ""
    }

    val richText = cell.richStringCellValue as XSSFRichTextString
    val text = richText.string
    println("208. üìú –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏: \"$text\".")

    val runs = richText.numFormattingRuns()
    println("209. üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤: $runs")

    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏–∫–æ–º
    if (runs == 0) {
        println("‚ö†Ô∏è –£ —è—á–µ–π–∫–∏ –Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç.")
        val processedContent = adjustWordUz(text, wordUz).escapeMarkdownV2()
        println("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: \"$processedContent\"")
        return processedContent
    }

    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –ø–æ —á–∞—Å—Ç—è–º
    val processedText = buildString {
        for (i in 0 until runs) {
            val start = richText.getIndexOfFormattingRun(i)
            val end = if (i + 1 < runs) richText.getIndexOfFormattingRun(i + 1) else text.length
            val substring = text.substring(start, end)

            val font = richText.getFontOfFormattingRun(i) as XSSFFont?
            val colorHex = font?.let { getFontColor(it) } ?: "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
            println("    üé® –¶–≤–µ—Ç —É—á–∞—Å—Ç–∫–∞ $i: $colorHex")

            val adjustedSubstring = adjustWordUz(substring, wordUz)

            if (colorHex == "#FF0000") {
                println("    üî¥ –¢–µ–∫—Å—Ç —É—á–∞—Å—Ç–∫–∞ \"$substring\" –∫—Ä–∞—Å–Ω—ã–π. –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é—Ä.")
                append("||${adjustedSubstring.escapeMarkdownV2()}||")
            } else {
                append(adjustedSubstring.escapeMarkdownV2())
            }
        }
    }

    println("213. ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: \"$processedText\".")
    return processedText
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞
fun getFontColor(font: XSSFFont): String {
    val color = font.xssfColor
    val colorHex = color?.rgb?.joinToString(prefix = "#", separator = "") { "%02X".format(it) } ?: "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
    println("        üîç –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞: $colorHex")
    return colorHex
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–æ–≤
fun XSSFColor.getRgbWithTint(): ByteArray? {
    return rgb?.let { baseRgb ->
        val tint = this.tint
        if (tint != 0.0) {
            baseRgb.map { (it and 0xFF.toByte()) * (1 + tint) }.map { it.coerceIn(0.0, 255.0).toInt().toByte() }.toByteArray()
        } else {
            baseRgb
        }
    }
}





