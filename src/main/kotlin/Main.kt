// Main.kt

package com.github.kotlintelegrambot.dispatcher
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import org.apache.poi.ss.usermodel.WorkbookFactory
import java.io.File
import kotlin.random.Random
import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.dispatcher.generateUsersButton
import com.github.kotlintelegrambot.entities.KeyboardReplyMarkup
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Sheet
import com.github.kotlintelegrambot.entities.ParseMode
import org.apache.poi.hssf.usermodel.HSSFFont
import org.apache.poi.ss.usermodel.CellType
import org.apache.poi.ss.usermodel.IndexedColors
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.xssf.usermodel.XSSFColor
import org.apache.poi.xssf.usermodel.XSSFFont
import org.apache.poi.xssf.usermodel.XSSFRichTextString
import java.io.FileOutputStream
import kotlin.experimental.and


val PadezhRanges = mapOf(
    "–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A1-A7", "B1-B7", "C1-C7", "D1-D7", "E1-E7"),
    "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A8-A14", "B8-B14", "C8-C14", "D8-D14", "E8-E14"),
    "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A15-A21", "B15-B21", "C15-C21", "D15-D21", "E15-E21"),
    "–î–∞—Ç–µ–ª—å–Ω—ã–π" to listOf("A22-A28", "B22-B28", "C22-C28", "D22-D28", "E22-E28"),
    "–ú–µ—Å—Ç–Ω—ã–π" to listOf("A29-A35", "B29-B35", "C29-C35", "D29-D35", "E29-E35"),
    "–ò—Å—Ö–æ–¥–Ω—ã–π" to listOf("A36-A42", "B36-B42", "C36-C42", "D36-D42", "E36-E42")
)

val userStates = mutableMapOf<Long, Int>() //–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –ø–∞–¥–µ–∂–∞
val userPadezh = mutableMapOf<Long, String>() // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
val userWords = mutableMapOf<Long, Pair<String, String>>() // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
val userBlocks = mutableMapOf<Long, Int>() // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
val userBlockCompleted = mutableMapOf<Long, Triple<Boolean, Boolean, Boolean>>() // –°–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–æ–≤ (–ø—Ä–æ–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç)
val userColumnOrder = mutableMapOf<Long, MutableList<String>>() // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
var wordUz: String? = "bola"
var wordRus: String? = "—Ä–µ–±–µ–Ω–æ–∫"
val userReplacements = mutableMapOf<Long, Map<Int, String>>() // –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ–Ω –¥–ª—è —á–∏—Å–µ–ª (1-9) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
var sheetColumnPairs = mutableMapOf<Long, Map<String, String>>() // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –ª–∏—Å—Ç/—Å—Ç–æ–ª–±–µ—Ü (–∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–æ–∫–∏)

val tableFile = "Table.xlsx"

fun main() {
    println("–ñ–ñ–ñ main // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
    val bot = bot {
        token = "7856005284:AAFVvPnRadWhaotjUZOmFyDFgUHhZ0iGsCo"
        println("–ñ1 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º")

        dispatch {
            command("start") {
                val chatId = message.chat.id
                println("–ñ2 –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId = $chatId")

                // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                userStates.remove(chatId)
                userPadezh.remove(chatId)
                userBlocks[chatId] = 1
                userBlockCompleted.remove(chatId)
                userColumnOrder.remove(chatId)
                println("–ñ3 –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId = $chatId")

                sendWelcomeMessage(chatId, bot) // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sendStartMenu(chatId, bot) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
            }


            callbackQuery {
                val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
                val data = callbackQuery.data ?: return@callbackQuery
                println("–ñ6 –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId = $chatId, data = $data")

                when {
                    data == "main_menu" -> {
                        println("üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è chatId = $chatId")

                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        userStates.remove(chatId)
                        userPadezh.remove(chatId)
                        userWords.remove(chatId)
                        userBlocks.remove(chatId)
                        userBlockCompleted.remove(chatId)
                        userColumnOrder.remove(chatId)

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
                        sendStartMenu(chatId, bot)
                    }
                    data.startsWith("Padezh:") -> {
                        val selectedPadezh = data.removePrefix("Padezh:")
                        println("–ñ7 –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂: chatId = $chatId, selectedPadezh = $selectedPadezh")
                        userPadezh[chatId] = selectedPadezh
                        userStates[chatId] = 0
                        userColumnOrder.remove(chatId)
                        bot.sendMessage(
                            chatId = ChatId.fromId(chatId),
                            text = """–ü–∞–¥–µ–∂: $selectedPadezh
                                |–°–ª–æ–≤–æ: $wordUz - $wordRus
                            """.trimMargin()
                        )
                        println("–ñ8 –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–∞–¥–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: chatId = $chatId, selectedPadezh = $selectedPadezh")
                        handleBlock(chatId, bot, tableFile, wordUz, wordRus)
//                        if (userWords.containsKey(chatId)) {
//                            wordUz = userWords[chatId]!!.first
//                            wordRus = userWords[chatId]!!.second
//                            println("–ñ9 –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ handleBlock: chatId = $chatId, wordUz = $wordUz, wordRus = $wordRus")
//                            handleBlock(chatId, bot, tableFile, wordUz, wordRus)
//                        } else {
//                            bot.sendMessage(
//                                chatId = ChatId.fromId(chatId),
//                                text = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ."
//                            )
//                        }
                    }
                    data.startsWith("word:") -> {
                        println("–ñ11 –í—ã–±–æ—Ä —Å–ª–æ–≤–∞: data = $data")
                        val result = extractWordsFromCallback(data)
                        userColumnOrder.remove(chatId)
                        wordUz = result.first
                        wordRus = result.second
                        println("–ñ12 –°–ª–æ–≤–æ –≤—ã–±—Ä–∞–Ω–æ: chatId = $chatId, wordUz = $wordUz, wordRus = $wordRus")
                        userWords[chatId] = result
                        userStates[chatId] = 0
                        handleBlock(chatId, bot, tableFile, wordUz, wordRus)
                        println("–ñ13 –í—ã–∑–≤–∞–Ω–∞ sendStateMessage: chatId = $chatId, wordUz = $wordUz, wordRus = $wordRus")
                    }
                    data.startsWith("next:") -> {
                        println("–ñ14 –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ': data = $data")
                        val params = data.removePrefix("next:").split(":")
                        if (params.size == 2) {
                            wordUz = params[0]
                            wordRus = params[1]
                            val currentState = userStates[chatId] ?: 0
                            userStates[chatId] = currentState + 1
                            println("–ñ15 –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: chatId = $chatId, currentState = ${userStates[chatId]}")

                            handleBlock(chatId, bot, tableFile, wordUz, wordRus)
                            println("–ñ16 –í—ã–∑–≤–∞–Ω–∞ handleBlock –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ': chatId = $chatId, wordUz = $wordUz, wordRus = $wordRus")
                        }
                    }
                    data.startsWith("repeat:") -> {
                        println("–ñ17 –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': data = $data")
                        val params = data.removePrefix("repeat:").split(":")
                        if (params.size == 2) {
                            wordUz = params[0]
                            wordRus = params[1]
                            userStates[chatId] = 0
                            userColumnOrder.remove(chatId)
                            handleBlock(chatId, bot, tableFile, wordUz, wordRus)
                            println("–ñ18 –í—ã–∑–≤–∞–Ω–∞ sendStateMessage –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': chatId = $chatId, wordUz = $wordUz, wordRus = $wordRus")
                        }
                    }
                    data.startsWith("next_adjective:") -> {
                        println("–ñ18 –û–±—Ä–∞–±–æ—Ç–∫–∞ '–î–∞–ª–µ–µ' –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö: data = $data")

                        val currentState = userStates[chatId] ?: 0
                        userStates[chatId] = currentState + 1
                        println("–ñ19 –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId=$chatId, newState=${userStates[chatId]}")

                        handleBlock(chatId, bot, tableFile, wordUz, wordRus)
                    }
                    data.startsWith("block:") -> {
                        val blockType = data.removePrefix("block:")
                        when (blockType) {
                            "1" -> {
                                userBlocks[chatId] = 1
                                println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –≤—ã–±—Ä–∞–ª –±–ª–æ–∫ 1")
                                handleBlock1(chatId, bot, tableFile, wordUz, wordRus)
                            }
                            "2" -> {
                                initializeUserBlockStates(chatId, tableFile)
                                val (block1Completed, _, _) = userBlockCompleted[chatId] ?: Triple(false, false, false)

                                if (block1Completed) {
                                    userBlocks[chatId] = 2
                                    println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –ø–µ—Ä–µ—à–µ–ª –≤–æ 2-–π –±–ª–æ–∫")
                                    handleBlock2(chatId, bot, tableFile, wordUz, wordRus)
                                } else {
                                    val messageText = "–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ë–ª–æ–∫ 1.\n–ü—Ä–æ–π–¥–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫–æ 2-–º—É –±–ª–æ–∫—É."
                                    bot.sendMessage(
                                        chatId = ChatId.fromId(chatId),
                                        text = messageText,
                                        replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                                            InlineKeyboardButton.CallbackData("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º", "main_menu")
                                        )
                                    )
                                    println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ë–ª–æ–∫ 1. –î–æ—Å—Ç—É–ø –∫ –ë–ª–æ–∫—É 2 –∑–∞–∫—Ä—ã—Ç.")
                                }
                            }

                            "3" -> {
                                initializeUserBlockStates(chatId, tableFile)
                                val (block1Completed, block2Completed, _) = userBlockCompleted[chatId] ?: Triple(false, false, false)

                                if (block1Completed && block2Completed) {
                                    userBlocks[chatId] = 3
                                    println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –ø–µ—Ä–µ—à–µ–ª –≤ 3-–π –±–ª–æ–∫")
                                    handleBlock3(chatId, bot, tableFile, wordUz, wordRus)
                                } else {
                                    val notCompletedBlocks = mutableListOf<String>()
                                    if (!block1Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 1")
                                    if (!block2Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 2")

                                    val messageText = "–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:\n" +
                                            notCompletedBlocks.joinToString("\n") + "\n–ü—Ä–æ–π–¥–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ 3-–º—É –±–ª–æ–∫—É."

                                    bot.sendMessage(
                                        chatId = ChatId.fromId(chatId),
                                        text = messageText,
                                        replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                                            InlineKeyboardButton.CallbackData("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º", "main_menu")
                                        )
                                    )
                                    println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –±–ª–æ–∫–∏: $notCompletedBlocks. –î–æ—Å—Ç—É–ø –∫ –ë–ª–æ–∫—É 3 –∑–∞–∫—Ä—ã—Ç.")
                                }
                            }

                            "test" -> {
                                initializeUserBlockStates(chatId, tableFile)
                                val (block1Completed, block2Completed, block3Completed) = userBlockCompleted[chatId] ?: Triple(false, false, false)

                                if (block1Completed && block2Completed && block3Completed) {
                                    userBlocks[chatId] = 4
                                    println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –ø–µ—Ä–µ—à–µ–ª –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫")
                                    checkBlocksBeforeTest(chatId, bot, tableFile)
                                } else {
                                    val notCompletedBlocks = mutableListOf<String>()
                                    if (!block1Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 1")
                                    if (!block2Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 2")
                                    if (!block3Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 3")

                                    val messageText = "–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:\n" +
                                            notCompletedBlocks.joinToString("\n") + "\n–ü—Ä–æ–π–¥–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º."

                                    bot.sendMessage(
                                        chatId = ChatId.fromId(chatId),
                                        text = messageText,
                                        replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                                            InlineKeyboardButton.CallbackData("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º", "main_menu")
                                        )
                                    )
                                    println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –±–ª–æ–∫–∏: $notCompletedBlocks. –î–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É –∑–∞–∫—Ä—ã—Ç.")
                                }
                            }
                            "adjective1" -> {
                                userBlocks[chatId] = 5
                                userStates.remove(chatId)
                                userPadezh.remove(chatId)
                                userColumnOrder.remove(chatId)

                                println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –≤—ã–±—Ä–∞–ª –±–ª–æ–∫ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 1")
                                handleBlockAdjective1(chatId, bot)
                            }
                            "adjective2" -> {
                                userBlocks[chatId] = 6
                                userStates.remove(chatId)
                                userPadezh.remove(chatId)
                                userColumnOrder.remove(chatId)
                                println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –≤—ã–±—Ä–∞–ª –±–ª–æ–∫ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 2")
                                handleBlockAdjective2(chatId, bot)
                            }
                            else -> {
                                bot.sendMessage(
                                    chatId = ChatId.fromId(chatId),
                                    text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫: $blockType"
                                )
                                println("–ñ28 –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫: $blockType")
                            }
                        }
                    }
                    data == "change_word" -> {
                        println("–ñ20 –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId = $chatId")
                        userStates[chatId] = 0
                        userWords.remove(chatId)
                        wordUz = null
                        wordRus = null
                        userColumnOrder.remove(chatId)
                        sendWordMessage(chatId, bot, tableFile)
                        println("–ñ21111 –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤: chatId = $chatId")
                    }
                    data == "change_words_adjective1" -> {
                        println("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤ –¥–ª—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 1: chatId = $chatId")
                        userReplacements.remove(chatId)
                        sheetColumnPairs.remove(chatId)
                        userStates.remove(chatId)
                        initializeSheetColumnPairsFromFile(chatId)  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä —Å–ª–æ–≤
                        handleBlockAdjective1(chatId, bot) // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 1
                    }
                    data == "change_words_adjective2" -> {
                        println("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤ –¥–ª—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 2: chatId = $chatId")
                        userReplacements.remove(chatId)
                        sheetColumnPairs.remove(chatId)
                        userStates.remove(chatId)
                        initializeSheetColumnPairsFromFile(chatId)  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä —Å–ª–æ–≤
                        handleBlockAdjective2(chatId, bot) // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 2
                    }
                    data == "change_Padezh" -> {
                        println("–ñ21 –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –ø–∞–¥–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId = $chatId")
                        userPadezh.remove(chatId)
                        userColumnOrder.remove(chatId)
                        sendPadezhSelection(chatId, bot, tableFile)
                        println("–ñ22 –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–µ–π: chatId = $chatId")
                    }
                    data == "reset" -> {
                        println("–ñ23 –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId = $chatId")
                        userPadezh.remove(chatId)
                        userStates.remove(chatId)
                        userColumnOrder.remove(chatId)
                        sendPadezhSelection(chatId, bot, tableFile)
                        println("–ñ24 –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω: chatId = $chatId")
                    }
                    data == "next_block" -> {
                        val currentBlock = userBlocks[chatId] ?: 1
                        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                        initializeUserBlockStates(chatId, tableFile)
                        val blockStates = userBlockCompleted[chatId] ?: Triple(false, false, false)
                        println("–ñ25 –û–±—Ä–∞–±–æ—Ç–∫–∞ '–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫': chatId = $chatId, currentBlock = $currentBlock")

                        userStates.remove(chatId)
                        userPadezh.remove(chatId)
                        userColumnOrder.remove(chatId)

                        when {
                            currentBlock == 1 && blockStates.first -> {
                                userBlocks[chatId] = 2
                                handleBlock2(chatId, bot, tableFile, wordUz, wordRus)
                            }
                            currentBlock == 2 && blockStates.second -> {
                                userBlocks[chatId] = 3
                                handleBlock3(chatId, bot, tableFile, wordUz, wordRus)
                            }
                            currentBlock == 3 && blockStates.third -> {
                                userBlocks[chatId] = 4
                                checkBlocksBeforeTest(chatId, bot, tableFile)
                            }
                            else -> {
                                val notCompletedBlocks = mutableListOf<String>()
                                if (!blockStates.first) notCompletedBlocks.add("–ë–ª–æ–∫ 1")
                                if (!blockStates.second) notCompletedBlocks.add("–ë–ª–æ–∫ 2")
                                if (!blockStates.third) notCompletedBlocks.add("–ë–ª–æ–∫ 3")

                                val messageText = "–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:\n" +
                                        notCompletedBlocks.joinToString("\n") +
                                        "\n–ü—Ä–æ–π–¥–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º."

                                bot.sendMessage(
                                    chatId = ChatId.fromId(chatId),
                                    text = messageText,
                                    replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                                        InlineKeyboardButton.CallbackData("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º", "main_menu")
                                    )
                                )
                                println("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∞—Ö: $notCompletedBlocks")
                            }
                        }
                    }

                    data == "prev_block" -> {
                        val currentBlock = userBlocks[chatId] ?: 1
                        println("–ñ29 –û–±—Ä–∞–±–æ—Ç–∫–∞ '–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫': chatId = $chatId, currentBlock = $currentBlock")
                        userStates.remove(chatId)
                        userPadezh.remove(chatId)

                        if (currentBlock > 1) {
                            userBlocks[chatId] = currentBlock - 1
                            handleBlock(chatId, bot, tableFile, wordUz, wordRus)
                            println("–ñ30 –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫: chatId = $chatId, prevBlock = ${userBlocks[chatId]}")
                        }
                    }
//                    data == "test_nouns" -> {
//                        println("–ñ30 –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º: chatId = $chatId")
//                        handleBlockTest(chatId, bot)
//                        println("–ñ31 –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handleBlockTest")
//                    }
//                    data == "adjective_block" -> {
//                        userStates[chatId] = 0
//                        println("–ñ32 –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫—É –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö: chatId = $chatId")
//                        handleBlockAdjective1(chatId, bot)
//                        println("–ñ33 –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handleBlockAdjective")
//                    }
                }
            }
        }
    }

    bot.startPolling()
    println("–ñ31 –ë–æ—Ç –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
}
// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
fun sendWelcomeMessage(chatId: Long, bot: Bot) {
    println("III sendWelcomeMessage // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    println("I1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId")

    val keyboardMarkup = KeyboardReplyMarkup(
        keyboard = generateUsersButton(),
        resizeKeyboard = true
    )
    println("I2 –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∏–∑—É—á–∞—Ç—å —É–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫!""",
        replyMarkup = keyboardMarkup
    )
    println("I3 –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
}
// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –±–ª–æ–∫–∞
fun sendStartMenu(chatId: Long, bot: Bot) {
    println("jjj sendStartMenu // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –±–ª–æ–∫–∞")

    val buttons = listOf(
        listOf(InlineKeyboardButton.CallbackData("–ë–ª–æ–∫ 1", "block:1")),
        listOf(InlineKeyboardButton.CallbackData("–ë–ª–æ–∫ 2", "block:2")),
        listOf(InlineKeyboardButton.CallbackData("–ë–ª–æ–∫ 3", "block:3")),
        listOf(InlineKeyboardButton.CallbackData("–¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫", "block:test")),
        listOf(InlineKeyboardButton.CallbackData("–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 1", "block:adjective1")),
        listOf(InlineKeyboardButton.CallbackData("–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2", "block:adjective2"))
    )

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
        replyMarkup = InlineKeyboardMarkup.create(buttons)
    )
    println("jjj –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chatId=$chatId")
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun handleBlock(chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?) {
    println("AAA handleBlock // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    println("A1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath, wordUz=$wordUz, wordRus=$wordRus")

    val currentBlock = userBlocks[chatId] ?: 1
    println("A2 –¢–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentBlock, userPadezh=${userPadezh[chatId]}")

    initializeUserBlockStates(chatId, filePath)
    println("A3 –°–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${userBlockCompleted[chatId]}")


    when (currentBlock) {
        1 -> {
            println("A6 –ó–∞–ø—É—Å–∫ handleBlock1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
            handleBlock1(chatId, bot, filePath, wordUz, wordRus)
        }
        2 -> {
            println("A7 –ó–∞–ø—É—Å–∫ handleBlock2 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
            handleBlock2(chatId, bot, filePath, wordUz, wordRus)
        }
        3 -> {
            println("A8 –ó–∞–ø—É—Å–∫ handleBlock3 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
            handleBlock3(chatId, bot, filePath, wordUz, wordRus)
        }
        4 -> {
            println("A9 –ó–∞–ø—É—Å–∫ handleBlockTest –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
            handleBlockTest(chatId, bot)
        }
        5 -> {
            println("A10 –ó–∞–ø—É—Å–∫ handleBlockAdjective1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
            handleBlockAdjective1(chatId, bot)
        }
        6 -> {
            println("A11 –ó–∞–ø—É—Å–∫ handleBlockAdjective2 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
            handleBlockAdjective2(chatId, bot)
        }
        else -> {
            println("A12 –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫: $currentBlock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫: $currentBlock"
            )
        }
    }
    println("A13 –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ handleBlock")
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ 1
fun handleBlock1(chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?) {
    println("BBB handleBlock1 // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ 1")
    if (userPadezh[chatId] == null) {
        println("A4 –ü–∞–¥–µ–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–∞–¥–µ–∂–∞.")
        sendPadezhSelection(chatId, bot, filePath)
        return
    }
    println("A5 –ü–∞–¥–µ–∂ –≤—ã–±—Ä–∞–Ω: ${userPadezh[chatId]}")
    if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
        sendWordMessage(chatId, bot, tableFile)
        println("B0 –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤: chatId = $chatId")
    } else {
        println("B1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath, wordUz=$wordUz, wordRus=$wordRus")
        sendStateMessage(chatId, bot, tableFile, wordUz, wordRus)
        println("B2 –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ handleBlock1")
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ 2
fun handleBlock2(chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?) {
    println("CCC handleBlock2 // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ 2")

    // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–∞–¥–µ–∂ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    if (userPadezh[chatId] == null) {
        sendPadezhSelection(chatId, bot, filePath)
        return
    }

    // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ —Å–ª–æ–≤–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
        sendWordMessage(chatId, bot, filePath)
        return
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞–¥–µ–∂–µ–π
    val blockRanges = mapOf(
        "–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A1-A7", "B1-B7", "C1-C7", "D1-D7", "E1-E7", "F1-F7"),
        "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A8-A14", "B8-B14", "C8-C14", "D8-D14", "E8-E14", "F8-F14"),
        "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to listOf("A15-A21", "B15-B21", "C15-C21", "D15-D21", "E15-E21", "F15-F21"),
        "–î–∞—Ç–µ–ª—å–Ω—ã–π" to listOf("A22-A28", "B22-B28", "C22-C28", "D22-D28", "E22-E28", "F22-F28"),
        "–ú–µ—Å—Ç–Ω—ã–π" to listOf("A29-A35", "B29-B35", "C29-C35", "D29-D35", "E29-E35", "F29-F35"),
        "–ò—Å—Ö–æ–¥–Ω—ã–π" to listOf("A36-A42", "B36-B42", "C36-C42", "D36-D42", "E36-E42", "F36-F42")
    )[userPadezh[chatId]] ?: return

    // –ï—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    if (userColumnOrder[chatId].isNullOrEmpty()) {
        userColumnOrder[chatId] = blockRanges.shuffled().toMutableList()
    }

    val currentState = userStates[chatId] ?: 0
    val shuffledColumns = userColumnOrder[chatId]!!
    println("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $currentState, –ö–æ–ª–æ–Ω–∫–∏: $shuffledColumns")

    // –ï—Å–ª–∏ –í–°–ï —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (currentState >= shuffledColumns.size) {
        println("‚úÖ –ë–ª–æ–∫ 2 –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.")
        addScoreForPadezh(chatId, userPadezh[chatId].toString(), filePath, block = 2)
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
        return
    }

    val range = shuffledColumns[currentState]
    val messageText = generateMessageFromRange(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 2", range, wordUz, wordRus)
    val isLastMessage = currentState == shuffledColumns.size - 1

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (isLastMessage) {
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = messageText, parseMode = ParseMode.MARKDOWN_V2)
        addScoreForPadezh(chatId, userPadezh[chatId].toString(), filePath, block = 2)
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
    } else {
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2,
            replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next:$wordUz:$wordRus")
            )
        )
    }
}

// –ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 3 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun handleBlock3(chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?) {
    println("üöÄ handleBlock3 // –ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 3 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")

    if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
        sendWordMessage(chatId, bot, filePath)
        println("‚ùå –û—à–∏–±–∫–∞: —Å–ª–æ–≤–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    }

    val allRanges = listOf(
        "A1-A7", "B1-B7", "C1-C7", "D1-D7", "E1-E7", "F1-F7",
        "A8-A14", "B8-B14", "C8-C14", "D8-D14", "E8-E14", "F8-F14",
        "A15-A21", "B15-B21", "C15-C21", "D15-D21", "E15-E21", "F15-F21",
        "A22-A28", "B22-B28", "C22-C28", "D22-D28", "E22-E28", "F22-F28",
        "A29-A35", "B29-B35", "C29-C35", "D29-D35", "E29-E35", "F29-F35"
    )

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –ø–æ—Ä—è–¥–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ ‚Äî –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    if (userColumnOrder[chatId].isNullOrEmpty()) {
        userColumnOrder[chatId] = allRanges.shuffled().toMutableList()
        println("üîÄ –ü–µ—Ä–µ–º–µ—à–∞–ª–∏ –º–∏–Ω–∏-–±–ª–æ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: ${userColumnOrder[chatId]}")
    }

    val shuffledRanges = userColumnOrder[chatId]!!
    val currentState = userStates[chatId] ?: 0
    println("üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentState")

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    val completedRanges = getCompletedRanges(chatId, filePath)
    println("‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –º–∏–Ω–∏-–±–ª–æ–∫–∏: $completedRanges")

    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω
    var currentRange: String? = null
    for (range in shuffledRanges) {
        if (!completedRanges.contains(range)) {
            currentRange = range
            break
        }
    }

    // –ï—Å–ª–∏ –í–°–ï 30 –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ç–æ –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–π) –¥–∏–∞–ø–∞–∑–æ–Ω
    if (currentRange == null) {
        println("‚ö†Ô∏è –í–°–ï 30 –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞.")
        currentRange = shuffledRanges[currentState % shuffledRanges.size]
    }

    println("üéØ –í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: $currentRange")

    val messageText = try {
        generateMessageFromRange(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 3", currentRange!!, wordUz, wordRus)
    } catch (e: Exception) {
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        return
    }

    val isLastRange = currentState == 5 // 6 —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ
    println("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: \"$messageText\"")

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = messageText,
        parseMode = ParseMode.MARKDOWN_V2,
        replyMarkup = if (isLastRange) null else InlineKeyboardMarkup.createSingleRowKeyboard(
            InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next:$wordUz:$wordRus")
        )
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    saveUserProgressBlok3(chatId, filePath, currentRange!!)
    println("üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $currentRange")

    if (!isLastRange) {
        println("üìå –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É")
    } else {
        println("üèÅ –ú–∏–Ω–∏-–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é")
        updateUserProgressForMiniBlocks(chatId, filePath, shuffledRanges.indices.toList())
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
fun handleBlockTest(chatId: Long, bot: Bot) {
    println("TTT handleBlockTest // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º")
    println("T1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId")

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–ï—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.",
        replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
            InlineKeyboardButton.CallbackData("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º", "block:adjective1")
        )
    )
    println("T2 –°–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫—É —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏
fun handleBlockAdjective1(chatId: Long, bot: Bot) {
    println("UUU handleBlockAdjective1 // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫—É —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏")
    println("U1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId")


    val currentBlock = userBlocks[chatId] ?: 1
    //val sheetName = if (currentBlock == 5) "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 1" else "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2"
    println("U2 –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: $currentBlock, –õ–∏—Å—Ç: –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 1")


    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–º–µ–Ω, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    if (userReplacements[chatId].isNullOrEmpty()) {
        initializeSheetColumnPairsFromFile(chatId)
        println("U3 –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–º–µ–Ω—ã: ${userReplacements[chatId]} -------------------------------------------------------------------------")
    }


    val rangesForAdjectives = listOf(
        "A1-A7", "B1-B7", "C1-C7", "D1-D7", "E1-E7",
        "F1-F7", "G1-G7", "H1-H7", "I1-I7", "J1-J7", "K1-K7", "L1-L7"
    )
    println("U4 –î–∏–∞–ø–∞–∑–æ–Ω—ã –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤: $rangesForAdjectives")

    println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  ${userStates[chatId]}")
    val currentState = userStates[chatId] ?: 0
    println("2!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  $currentState")
    println("U5 –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentState")

    // –ï—Å–ª–∏ –≤—Å–µ –º–∏–Ω–∏-–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    if (currentState >= rangesForAdjectives.size) {
        println("U6 –í—Å–µ –º–∏–Ω–∏-–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.")
        sendFinalButtonsForAdjectives(chatId, bot)
        userReplacements.remove(chatId) // –û—á–∏—â–∞–µ–º –∑–∞–º–µ–Ω—ã
        return
    }

    val currentRange = rangesForAdjectives[currentState]
    println("U7 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: $currentRange")

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–º–µ–Ω–∞–º–∏
    val messageText = try {
        generateAdjectiveMessage(tableFile, "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 1", currentRange, userReplacements[chatId]!!)
    } catch (e: Exception) {
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        println("U8 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        return
    }
    println("U9 –°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $messageText")

    val isLastRange = currentState == rangesForAdjectives.size - 1
    println("U10 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: $isLastRange")

    if (userStates[chatId] == null) { // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –≤–æ—à–µ–ª –≤ –±–ª–æ–∫
        sendReplacementsMessage(chatId, bot) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 9 –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤
    }


//    bot.sendMessage(
//        chatId = ChatId.fromId(chatId),
//        text = messageText,
//        parseMode = ParseMode.MARKDOWN_V2,
//        replyMarkup = if (isLastRange) null else InlineKeyboardMarkup.createSingleRowKeyboard(
//            InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next_adjective:$currentBlock")
//        )
//    )
//    println("U11 –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chatId=$chatId")

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª–∏–±–æ —Å –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª–µ–µ", –ª–∏–±–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é)
    if (isLastRange) {
        println("–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2
        )
        sendFinalButtonsForAdjectives(chatId, bot)
    } else {
        println("–ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–î–∞–ª–µ–µ'.")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2,
            replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next_adjective:$chatId")
            )
        )
    }

//    if (!isLastRange) {
//        userStates[chatId] = currentState + 1
//        println("U12 –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId=$chatId, newState=${userStates[chatId]}")
//    }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫—É —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏
fun handleBlockAdjective2(chatId: Long, bot: Bot) {
    println("UUU2 handleBlockAdjective2 // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫—É —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏")
    println("U21 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId")


    val currentBlock = userBlocks[chatId] ?: 1
    //val sheetName = if (currentBlock == 5) "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 1" else "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2"
    println("U22 –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: $currentBlock, –õ–∏—Å—Ç: –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2")


    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–º–µ–Ω, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    if (userReplacements[chatId].isNullOrEmpty()) {
        initializeSheetColumnPairsFromFile(chatId)
        println("U23 –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–º–µ–Ω—ã: ${userReplacements[chatId]}++++++++++++++++++++++++++++++++++++++++++++++++++++")
    }

    val rangesForAdjectives = listOf(
        "A1-A7", "B1-B7", "C1-C7", "D1-D7", "E1-E7",
        "F1-F7", "G1-G7", "H1-H7", "I1-I7"
    )
    println("U24 –î–∏–∞–ø–∞–∑–æ–Ω—ã –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤: $rangesForAdjectives")

    val currentState = userStates[chatId] ?: 0
    println("U25 –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentState")

    // –ï—Å–ª–∏ –≤—Å–µ –º–∏–Ω–∏-–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    if (currentState >= rangesForAdjectives.size) {
        println("U26 –í—Å–µ –º–∏–Ω–∏-–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.")
        sendFinalButtonsForAdjectives(chatId, bot)
        userReplacements.remove(chatId) // –û—á–∏—â–∞–µ–º –∑–∞–º–µ–Ω—ã
        return
    }

    val currentRange = rangesForAdjectives[currentState]
    println("U27 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: $currentRange")

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–º–µ–Ω–∞–º–∏
    val messageText = try {
        generateAdjectiveMessage(tableFile, "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 2", currentRange, userReplacements[chatId]!!)
    } catch (e: Exception) {
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        println("U28 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        return
    }
    println("U29 –°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $messageText")

    val isLastRange = currentState == rangesForAdjectives.size - 1
    println("U210 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: $isLastRange")

    if (userStates[chatId] == null) { // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –≤–æ—à–µ–ª –≤ –±–ª–æ–∫
        sendReplacementsMessage(chatId, bot) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 9 –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª–∏–±–æ —Å –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª–µ–µ", –ª–∏–±–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é)
    if (isLastRange) {
        println("–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2
        )
        sendFinalButtonsForAdjectives(chatId, bot)
    } else {
        println("–ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–î–∞–ª–µ–µ'.")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2,
            replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next_adjective:$chatId")
            )
        )
    }
    println("U211 –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chatId=$chatId")

//    if (!isLastRange) {
//        userStates[chatId] = currentState + 1
//        println("U12 –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId=$chatId, newState=${userStates[chatId]}")
//    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun generateReplacements(chatId: Long) {
    println("VVV generateReplacements // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    val userPairs = sheetColumnPairs[chatId] ?: run {
        println("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ sheetColumnPairs –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")
        return
    }

    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ (—É–∑–±–µ–∫—Å–∫–∏–µ —Å–ª–æ–≤–∞)
    val keysList = userPairs.keys.toList()
    if (keysList.size < 9) {
        println("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã.")
    }

    // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω—è–µ–º—ã–π Map (MutableMap)
    val replacements = mutableMapOf<Int, String>()
    keysList.take(9).forEachIndexed { index, key ->
        replacements[index + 1] = key
    }

    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º userReplacements –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userReplacements[chatId] = replacements
    println("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: $replacements")
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
fun generateAdjectiveMessage(
    filePath: String,
    sheetName: String,
    range: String,
    replacements: Map<Int, String>
): String {
    println("WWW generateAdjectiveMessage // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö")
    println("W1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName, range=$range")

    val rawText = generateMessageFromRange(filePath, sheetName, range, null, null)
    println("W2 –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: \"$rawText\"")

    val processedText = rawText.replace(Regex("[1-9]")) { match ->
        val digit = match.value.toInt()
        replacements[digit] ?: match.value // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–º–µ–Ω—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }
    println("W3 –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"$processedText\"")
    return processedText
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
fun sendFinalButtonsForAdjectives(chatId: Long, bot: Bot) {
    println("XXX sendFinalButtonsForAdjectives // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é")
    println("X1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId")

    val currentBlock = userBlocks[chatId] ?: 5  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 (–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ 1)
    val repeatCallback = if (currentBlock == 5) "block:adjective1" else "block:adjective2"
    val changeWordsCallback = if (currentBlock == 5) "change_words_adjective1" else "change_words_adjective2"

    val navigationButton = if (currentBlock == 5) {
        InlineKeyboardButton.CallbackData("–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫", "block:adjective2")
    } else {
        InlineKeyboardButton.CallbackData("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫", "block:adjective1")
    }

    val buttons = listOf(
        listOf(InlineKeyboardButton.CallbackData("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", repeatCallback)),
        listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–±–æ—Ä —Å–ª–æ–≤", changeWordsCallback)),
        listOf(InlineKeyboardButton.CallbackData("–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", "main_menu")),
        listOf(navigationButton)
    )

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        replyMarkup = InlineKeyboardMarkup.create(buttons)
    )
    println("X2 –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chatId=$chatId")
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ Excel
fun extractRandomWords(filePath: String, sheetName: String, column: Int, count: Int): List<String> {
    println("YYY extractRandomWords // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ Excel")
    println("Y1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName, column=$column, count=$count")

    val file = File(filePath)
    if (!file.exists()) {
        println("Y2 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    val workbook = WorkbookFactory.create(file)
    val sheet = workbook.getSheet(sheetName)
        ?: throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
    println("Y3 –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")

    val rows = (1..sheet.lastRowNum).shuffled().take(count)
    val words = rows.mapNotNull { rowIndex ->
        val row = sheet.getRow(rowIndex)
        row?.getCell(column)?.toString()?.trim()
    }
    workbook.close()
    println("Y4 –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: $words")
    return words
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–∞
fun sendPadezhSelection(chatId: Long, bot: Bot, filePath: String) {
    println("EEE sendPadezhSelection // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–∞")
    println("E1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath")

    userPadezh.remove(chatId)
    userStates.remove(chatId)
    println("E2 –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")

    val currentBlock = userBlocks[chatId] ?: 1
    println("E3 –¢–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentBlock")

    val PadezhColumns = getPadezhColumnsForBlock(currentBlock)
    if (PadezhColumns == null) {
        println("E4 –û—à–∏–±–∫–∞: –±–ª–æ–∫ $currentBlock –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞.")
        return
    }

    val userScores = getUserScoresForBlock(chatId, filePath, PadezhColumns)
    println("E5 –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userScores")

    val buttons = generatePadezhSelectionButtons(currentBlock, PadezhColumns, userScores)
    println("E6 –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏: $buttons")

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–¥–µ–∂ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞ $currentBlock:",
        replyMarkup = InlineKeyboardMarkup.create(buttons)
    )
    println("E7 –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
fun getPadezhColumnsForBlock(block: Int): Map<String, Int>? {
    println("FFF getPadezhColumnsForBlock // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞")
    println("F1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: block=$block")
    val columnRanges = mapOf(
        1 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 1, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 2, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 3, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 4, "–ú–µ—Å—Ç–Ω—ã–π" to 5, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 6),
        2 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 7, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 8, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 9, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 10, "–ú–µ—Å—Ç–Ω—ã–π" to 11, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 12),
        3 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 13, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 14, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 15, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 16, "–ú–µ—Å—Ç–Ω—ã–π" to 17, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 18)
    )
    val result = columnRanges[block]
    println("F2 –†–µ–∑—É–ª—å—Ç–∞—Ç: $result")
    return result
}

// –ß—Ç–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∞
fun getUserScoresForBlock(chatId: Long, filePath: String, PadezhColumns: Map<String, Int>): Map<String, Int> {
    println("GGG getUserScoresForBlock // –ß—Ç–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∞")
    println("G1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath, PadezhColumns=$PadezhColumns")

    val file = File(filePath)
    if (!file.exists()) {
        println("G2 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return emptyMap()
    }

    val scores = mutableMapOf<String, Int>()
    println("G3 –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if (sheet == null) {
            println("G4 –û—à–∏–±–∫–∞: –ª–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return emptyMap()
        }

        for (row in sheet) {
            val idCell = row.getCell(0)
            val chatIdXlsx = when (idCell?.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toLongOrNull()
                else -> null
            }

            if (chatId == chatIdXlsx) {
                println("G5 –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatIdXlsx. –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–ª—ã...")
                for ((PadezhName, colIndex) in PadezhColumns) {
                    val cell = row.getCell(colIndex)
                    val score = cell?.numericCellValue?.toInt() ?: 0
                    scores[PadezhName] = score
                    println("G6 –ü–∞–¥–µ–∂: $PadezhName, –ë–∞–ª–ª—ã: $score")
                }
                break
            }
        }
    }

    println("G7 –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: $scores")
    return scores
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–µ–π
fun generatePadezhSelectionButtons(
    currentBlock: Int,
    PadezhColumns: Map<String, Int>,
    userScores: Map<String, Int>
): List<List<InlineKeyboardButton>> {
    println("HHH generatePadezhSelectionButtons // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–µ–π")
    println("H1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: currentBlock=$currentBlock, PadezhColumns=$PadezhColumns, userScores=$userScores")

    val buttons = PadezhColumns.keys.map { PadezhName ->
        val score = userScores[PadezhName] ?: 0
        InlineKeyboardButton.CallbackData("$PadezhName [$score]", "Padezh:$PadezhName")
    }.map { listOf(it) }.toMutableList()
    println("H2 –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–¥–µ–∂–µ–π: $buttons")

    if (currentBlock > 1) {
        buttons.add(listOf(InlineKeyboardButton.CallbackData("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫", "prev_block")))
        println("H3 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –±–ª–æ–∫—É")
    }
    if (currentBlock < 3) {
        buttons.add(listOf(InlineKeyboardButton.CallbackData("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫", "next_block")))
        println("H4 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É")
    }

    println("H5 –ò—Ç–æ–≥–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏: $buttons")
    return buttons
}




// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ /start
fun generateUsersButton(): List<List<KeyboardButton>> {
    println("JJJ generateUsersButton // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ /start")
    println("J1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é.")
    val result = listOf(
        listOf(KeyboardButton("/start"))
    )
    println("J2 –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏: $result")
    return result
}


// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤
fun sendWordMessage(chatId: Long, bot: Bot, filePath: String) {
    println("KKK sendWordMessage // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤")
    println("K1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath")

    if (!File(filePath).exists()) {
        println("K2 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        println("K3 –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
        return
    }

    val inlineKeyboard = try {
        println("K4 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ $filePath")
        createWordSelectionKeyboardFromExcel(filePath, "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ")
    } catch (e: Exception) {
        println("K5 –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}"
        )
        println("K6 –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
        return
    }

    println("K7 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: $inlineKeyboard")
    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        replyMarkup = inlineKeyboard
    )
    println("K8 –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
}


// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ Excel-—Ñ–∞–π–ª–∞
fun createWordSelectionKeyboardFromExcel(filePath: String, sheetName: String): InlineKeyboardMarkup {
    println("LLL createWordSelectionKeyboardFromExcel // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ Excel-—Ñ–∞–π–ª–∞")
    println("L1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName")

    println("L2 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ $filePath")
    val file = File(filePath)
    if (!file.exists()) {
        println("L3 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    println("L4 –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: $filePath. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel")
    val workbook = WorkbookFactory.create(file)
    val sheet = workbook.getSheet(sheetName)
        ?: throw IllegalArgumentException("D5 –û—à–∏–±–∫–∞: –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
    println("L6 –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω: $sheetName")

    println("L7 –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${sheet.lastRowNum + 1}")
    val randomRows = (1..sheet.lastRowNum).shuffled().take(10)
    println("L8 –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫: $randomRows")

    println("L9 –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫")
    val buttons = randomRows.mapNotNull { rowIndex ->
        val row = sheet.getRow(rowIndex)
        if (row == null) {
            println("L10 –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return@mapNotNull null
        }

        val wordUz = row.getCell(0)?.toString()?.trim()
        val wordRus = row.getCell(1)?.toString()?.trim()

        if (wordUz.isNullOrBlank() || wordRus.isNullOrBlank()) {
            println("L11 –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: wordUz=$wordUz, wordRus=$wordRus. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return@mapNotNull null
        }

        println("L12 –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ $rowIndex: wordUz=$wordUz, wordRus=$wordRus")
        InlineKeyboardButton.CallbackData("$wordUz - $wordRus", "word:($wordUz - $wordRus)")
    }.chunked(2)

    println("L13 –ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫: ${buttons.size}")
    workbook.close()
    println("L14 –§–∞–π–ª Excel –∑–∞–∫—Ä—ã—Ç. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    return InlineKeyboardMarkup.create(buttons)
}


// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ callback data
fun extractWordsFromCallback(data: String): Pair<String, String> {
    println("MMM extractWordsFromCallback // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ callback data")
    println("M1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: data=$data")

    val content = data.substringAfter("word:(").substringBefore(")")
    val wordUz = content.substringBefore(" - ").trim()
    val wordRus = content.substringAfter(" - ").trim()

    println("M2 –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: wordUz=$wordUz, wordRus=$wordRus")
    return wordUz to wordRus
}


// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏ –ø–∞–¥–µ–∂—É
fun sendStateMessage(chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?) {
    println("NNN sendStateMessage // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏ –ø–∞–¥–µ–∂—É")
    println("N1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath, wordUz=$wordUz, wordRus=$wordRus")

    val (selectedPadezh, rangesForPadezh, currentState) = validateUserState(chatId, bot) ?: return
    println("N2 –í–∞–ª–∏–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: selectedPadezh=$selectedPadezh, rangesForPadezh=$rangesForPadezh, currentState=$currentState")

    processStateAndSendMessage(chatId, bot, filePath, wordUz, wordRus, selectedPadezh, rangesForPadezh, currentState)
    println("N3 –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ sendStateMessage")
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun validateUserState(chatId: Long, bot: Bot): Triple<String, List<String>, Int>? {
    println("OOO validateUserState // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    println("O1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId")

    val selectedPadezh = userPadezh[chatId]
    if (selectedPadezh == null) {
        println("O2 –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–¥–µ–∂.")
        return null
    }
    println("O3 –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–¥–µ–∂: $selectedPadezh")

    val rangesForPadezh = PadezhRanges[selectedPadezh]
    if (rangesForPadezh == null) {
        println("O4 –û—à–∏–±–∫–∞: –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞ $selectedPadezh –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞: –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return null
    }

    val currentState = userStates[chatId] ?: 0
    println("O5 –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentState")

    return Triple(selectedPadezh, rangesForPadezh, currentState)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
fun processStateAndSendMessage(
    chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?,
    selectedPadezh: String, rangesForPadezh: List<String>, currentState: Int
) {
    println("PPP processStateAndSendMessage // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    println("P1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath, wordUz=$wordUz, wordRus=$wordRus, selectedPadezh=$selectedPadezh, currentState=$currentState")

    if (currentState >= rangesForPadezh.size) {
        println("P2 –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –ø–∞–¥–µ–∂–∞: $selectedPadezh")
        addScoreForPadezh(chatId, selectedPadezh, filePath)
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
        return
    }

    val range = rangesForPadezh[currentState]
    println("P3 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: $range")
    val currentBlock = userBlocks[chatId] ?: 1
    val listName = when (currentBlock) {
        1 -> "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 1"
        2 -> "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 2"
        3 -> "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 3"
        else -> "–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ 1"
    }
    println("P4 –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: $currentBlock, –õ–∏—Å—Ç: $listName")

    val messageText = try {
        generateMessageFromRange(filePath, listName, range, wordUz, wordRus)
    } catch (e: Exception) {
        println("P5 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    }

    println("P6 –°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $messageText")
    sendMessageOrNextStep(chatId, bot, filePath, wordUz, wordRus, selectedPadezh, rangesForPadezh, currentState, messageText)
    println("P7 –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ processStateAndSendMessage")
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
fun sendMessageOrNextStep(
    chatId: Long, bot: Bot, filePath: String, wordUz: String?, wordRus: String?,
    selectedPadezh: String, rangesForPadezh: List<String>, currentState: Int, messageText: String
) {
    println("QQQ sendMessageOrNextStep // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É")
    println("Q1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, currentState=$currentState, messageText=$messageText")

    if (currentState == rangesForPadezh.size - 1) {
        println("Q2 –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–¥–µ–∂–∞: $selectedPadezh")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2
        )
        println("Q3 –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.")
        val currentBlock = userBlocks[chatId] ?: 1
        addScoreForPadezh(chatId, selectedPadezh, filePath, currentBlock)
        sendFinalButtons(chatId, bot, wordUz, wordRus, filePath)
        println("Q4 –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    } else {
        println("Q5 –≠—Ç–∞–ø –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–î–∞–ª–µ–µ'")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            parseMode = ParseMode.MARKDOWN_V2,
            replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                InlineKeyboardButton.CallbackData("–î–∞–ª–µ–µ", "next:$wordUz:$wordRus")
            )
        )
        println("Q6 –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
fun sendFinalButtons(chatId: Long, bot: Bot, wordUz: String?, wordRus: String?, filePath: String) {
    println("RRR sendFinalButtons // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π")
    println("R1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, wordUz=$wordUz, wordRus=$wordRus")

    val currentBlock = userBlocks[chatId] ?: 1
    println("R2 –¢–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentBlock")

    val buttons = mutableListOf(
        listOf(InlineKeyboardButton.CallbackData("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "repeat:$wordUz:$wordRus")),
        listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", "change_word"))
    )

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç—Ä–µ—Ç—å–µ–º –±–ª–æ–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º"
    if (currentBlock == 3) {
        buttons.add(listOf(InlineKeyboardButton.CallbackData("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º", "block:test")))
        println("R3 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º'")
    } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–¥–µ–∂"
        buttons.add(listOf(InlineKeyboardButton.CallbackData("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–¥–µ–∂", "change_Padezh")))
        println("R4 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–¥–µ–∂'")
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
    if (currentBlock > 1) {
        buttons.add(listOf(InlineKeyboardButton.CallbackData("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫", "prev_block")))
        println("R5 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫'")
    }
    if (currentBlock < 3) {
        buttons.add(listOf(InlineKeyboardButton.CallbackData("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫", "next_block")))
        println("R6 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫'")
    }

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∏ –ø–∞–¥–µ–∂–æ–º. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        replyMarkup = InlineKeyboardMarkup.create(buttons)
    )
    println("R7 –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId")
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel
fun generateMessageFromRange(filePath: String, sheetName: String, range: String, wordUz: String?, wordRus: String?): String {
    println("SSS generateMessageFromRange // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Excel")
    println("S1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=$filePath, sheetName=$sheetName, range=$range, wordUz=$wordUz, wordRus=$wordRus")

    val file = File(filePath)
    if (!file.exists()) {
        println("S2 –û—à–∏–±–∫–∞: —Ñ–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    val workbook = WorkbookFactory.create(file)
    val sheet = workbook.getSheet(sheetName)
    if (sheet == null) {
        println("S3 –û—à–∏–±–∫–∞: –ª–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    println("S4 –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω. –ò–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ $range")
    val cells = extractCellsFromRange(sheet, range, wordUz)
    println("S5 –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: $cells")

    val firstCell = cells.firstOrNull() ?: ""
    val messageBody = cells.drop(1).joinToString("\n")

    workbook.close()
    println("S6 –§–∞–π–ª Excel –∑–∞–∫—Ä—ã—Ç.")

    val result = listOf(firstCell, messageBody).filter { it.isNotBlank() }.joinToString("\n\n")
    println("S7 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: $result")
    return result
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown V2
fun String.escapeMarkdownV2(): String {
    println("TTT escapeMarkdownV2 // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown V2")
    println("T1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –°—Ç—Ä–æ–∫–∞: \"$this\"")
    val escaped = this.replace("\\", "\\\\")
        .replace("_", "\\_")
        .replace("*", "\\*")
        .replace("[", "\\[")
        .replace("]", "\\]")
        .replace("(", "\\(")
        .replace(")", "\\)")
        .replace("~", "\\~")
        .replace("`", "\\`")
        .replace(">", "\\>")
        .replace("#", "\\#")
        .replace("+", "\\+")
        .replace("-", "\\-")
        .replace("=", "\\=")
        .replace("|", "\\|")
        .replace("{", "\\{")
        .replace("}", "\\}")
        .replace(".", "\\.")
        .replace("!", "\\!")
    println("T2 –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: \"$escaped\"")
    return escaped
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–±–µ–∫—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
fun adjustWordUz(content: String, wordUz: String?): String {
    println("UUU adjustWordUz // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–±–µ–∫—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏")
    println("U1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: content=\"$content\", wordUz=\"$wordUz\"")

    fun Char.isVowel() = this.lowercaseChar() in "aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è"

    val result = buildString {
        var i = 0
        while (i < content.length) {
            val char = content[i]
            when {
                char == '+' && i + 1 < content.length -> {
                    val nextChar = content[i + 1]
                    val lastChar = wordUz?.lastOrNull()
                    val replacement = when {
                        lastChar != null && lastChar.isVowel() && nextChar.isVowel() -> "s"
                        lastChar != null && !lastChar.isVowel() && !nextChar.isVowel() -> "i"
                        else -> ""
                    }
                    append(replacement)
                    append(nextChar)
                    i++
                }
                char == '*' -> append(wordUz)
                else -> append(char)
            }
            i++
        }
    }
    println("U2 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: \"$result\"")
    return result
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–µ–∫ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
fun extractCellsFromRange(sheet: Sheet, range: String, wordUz: String?): List<String> {
    println("VVV extractCellsFromRange // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–µ–∫ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    println("V1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: range=\"$range\", wordUz=\"$wordUz\"")

    val (start, end) = range.split("-").map { it.replace(Regex("[A-Z]"), "").toInt() - 1 }
    val column = range[0] - 'A'
    println("V2 –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫: $start-$end, –ö–æ–ª–æ–Ω–∫–∞: $column")

    val cells = (start..end).mapNotNull { rowIndex ->
        val row = sheet.getRow(rowIndex)
        if (row == null) {
            println("V3 ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return@mapNotNull null
        }
        val cell = row.getCell(column)
        if (cell == null) {
            println("V4 ‚ö†Ô∏è –Ø—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return@mapNotNull null
        }
        val processed = processCellContent(cell, wordUz)
        println("V5 ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $rowIndex: \"$processed\"")
        processed
    }
    println("V6 –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: $cells")
    return cells
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun checkUserState(chatId: Long, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"): Boolean {
    println("WWW checkUserState // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    println("W1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=\"$filePath\", sheetName=\"$sheetName\"")

    val file = File(filePath)
    if (!file.exists()) {
        println("W2 ‚ùå –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return false
    }

    val allCompleted: Boolean
    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName)
        if (sheet == null) {
            println("W3 ‚ùå –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return false
        }
        println("W4 ‚úÖ –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫...")

        var userRow: Row? = null
        for (rowIndex in 1..sheet.lastRowNum.coerceAtLeast(1)) {
            val row = sheet.getRow(rowIndex) ?: sheet.createRow(rowIndex)
            val idCell = row.getCell(0) ?: row.createCell(0)

            val currentId = when (idCell.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toLongOrNull()
                else -> null
            }
            println("W5 –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex + 1}. ID: $currentId")

            if (currentId == chatId) {
                userRow = row
                println("W6 ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}")
                break
            }

            if (currentId == null || currentId == 0L) {
                println("W7 ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                idCell.setCellValue(chatId.toDouble())
                for (i in 1..6) row.createCell(i).setCellValue(0.0)
                safelySaveWorkbook(workbook, filePath)
                println("C8 ‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É ${rowIndex + 1}")
                return false
            }
        }

        allCompleted = userRow?.let {
            (1..6).all { index ->
                val cell = it.getCell(index)
                val value = cell?.toString()?.toDoubleOrNull() ?: 0.0
                println("W9 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ $index. –ó–Ω–∞—á–µ–Ω–∏–µ: $value")
                value > 0
            }
        } ?: false
    }
    println("W10 –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: $allCompleted")
    return allCompleted
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
fun safelySaveWorkbook(workbook: org.apache.poi.ss.usermodel.Workbook, filePath: String) {
    println("XXX safelySaveWorkbook // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª")
    println("X1 –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: filePath=\"$filePath\"")

    val tempFile = File("${filePath}.tmp")
    try {
        FileOutputStream(tempFile).use { workbook.write(it) }
        println("X2 –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile.path}")

        val originalFile = File(filePath)
        if (originalFile.exists() && !originalFile.delete()) {
            println("X3 ‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
            throw IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: $filePath")
        }

        if (!tempFile.renameTo(originalFile)) {
            println("X4 ‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
            throw IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile.path}")
        }
        println("X5 ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $filePath")
    } catch (e: Exception) {
        println("X6 ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${e.message}")
        tempFile.delete()
        throw e
    }
}

// –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª –¥–ª—è –ø–∞–¥–µ–∂–∞
fun addScoreForPadezh(chatId: Long, Padezh: String, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") {
    println("YYY addScoreForPadezh // –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª –¥–ª—è –ø–∞–¥–µ–∂–∞")

    println("Y1 –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $chatId, –ü–∞–¥–µ–∂: $Padezh, –§–∞–π–ª: $filePath, –õ–∏—Å—Ç: $sheetName")
    val file = File(filePath)
    if (!file.exists()) {
        println("Y2 –û—à–∏–±–∫–∞: –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    }

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName)
            ?: throw IllegalArgumentException("A3 –û—à–∏–±–∫–∞: –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
        println("Y4 –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω")

        val PadezhColumnIndex = when (Padezh) {
            "–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" -> 1
            "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" -> 2
            "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" -> 3
            "–î–∞—Ç–µ–ª—å–Ω—ã–π" -> 4
            "–ú–µ—Å—Ç–Ω—ã–π" -> 5
            "–ò—Å—Ö–æ–¥–Ω—ã–π" -> 6
            else -> throw IllegalArgumentException("A5 –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–¥–µ–∂: $Padezh")
        }

        println("Y6 –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId –≤ —Ç–∞–±–ª–∏—Ü–µ...")
        for (rowIndex in 1..sheet.lastRowNum) {
            val row = sheet.getRow(rowIndex) ?: continue
            val idCell = row.getCell(0)
            val currentId = when (idCell?.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                else -> null
            }

            println("Y7 –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex + 1}: ID = $currentId")
            if (currentId == chatId) {
                println("Y8 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}")
                val PadezhCell = row.getCell(PadezhColumnIndex) ?: row.createCell(PadezhColumnIndex)
                val currentScore = PadezhCell.numericCellValue.takeIf { it > 0 } ?: 0.0
                println("Y9 –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: $currentScore")
                PadezhCell.setCellValue(currentScore + 1)
                println("Y10 –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentScore + 1}")
                safelySaveWorkbook(workbook, filePath)
                println("Y11 –ë–∞–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                return
            }
        }
        println("Y12 –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun checkUserState(chatId: Long, filePath: String, sheetName: String = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", block: Int = 1): Boolean {
    println("ZZZ checkUserState // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    println("Z1 –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $chatId, –§–∞–π–ª: $filePath, –õ–∏—Å—Ç: $sheetName, –ë–ª–æ–∫: $block")
    val columnRanges = mapOf(
        1 to (1..6),
        2 to (7..12),
        3 to (13..18)
    )
    val columns = columnRanges[block] ?: run {
        println("Z2 –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫: $block")
        return false
    }

    println("Z3 –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –±–ª–æ–∫–∞ $block: $columns")
    val file = File(filePath)
    if (!file.exists()) {
        println("Z4 –û—à–∏–±–∫–∞: –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return false
    }

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet(sheetName)
        if (sheet == null) {
            println("Z5 –û—à–∏–±–∫–∞: –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return false
        }

        println("Z6 –õ–∏—Å—Ç $sheetName –Ω–∞–π–¥–µ–Ω. –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${sheet.lastRowNum + 1}")
        for (row in sheet) {
            val idCell = row.getCell(0) ?: continue
            val chatIdFromCell = when (idCell.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                else -> null
            }

            println("Z7 –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É ${row.rowNum + 1}: ID = $chatIdFromCell")
            if (chatIdFromCell == chatId) {
                println("Z8 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}")
                val allColumnsCompleted = columns.all { colIndex ->
                    val cell = row.getCell(colIndex)
                    val value = cell?.numericCellValue ?: 0.0
                    println("Z9 –ö–æ–ª–æ–Ω–∫–∞ $colIndex: –∑–Ω–∞—á–µ–Ω–∏–µ = $value. –í—ã–ø–æ–ª–Ω–µ–Ω–æ? ${value > 0}")
                    value > 0
                }
                println("Z10 –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: $allColumnsCompleted")
                return allColumnsCompleted
            }
        }
    }
    println("Z11 –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
    return false
}

// –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun addScoreForPadezh(chatId: Long, Padezh: String, filePath: String, block: Int) {
    println("aaa addScoreForPadezh // –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    println("a1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, Padezh=$Padezh, filePath=$filePath, block=$block")

    val columnRanges = mapOf(
        1 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 1, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 2, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 3, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 4, "–ú–µ—Å—Ç–Ω—ã–π" to 5, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 6),
        2 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 7, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 8, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 9, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 10, "–ú–µ—Å—Ç–Ω—ã–π" to 11, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 12),
        3 to mapOf("–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 13, "–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" to 14, "–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π" to 15, "–î–∞—Ç–µ–ª—å–Ω—ã–π" to 16, "–ú–µ—Å—Ç–Ω—ã–π" to 17, "–ò—Å—Ö–æ–¥–Ω—ã–π" to 18)
    )

    val column = columnRanges[block]?.get(Padezh)
    println("a2 –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: $column")
    if (column == null) {
        println("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –±–ª–æ–∫–∞ $block –∏ –ø–∞–¥–µ–∂–∞ $Padezh –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    }

    val file = File(filePath)
    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        println("a3 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–∏—Å—Ç–∞ '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'")
        if (sheet == null) {
            println("‚ùå –û—à–∏–±–∫–∞: –õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        }
        println("a4 –õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω. –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${sheet.lastRowNum + 1}")

        var userFound = false

        for (row in sheet) {
            val idCell = row.getCell(0)
            println("a5 –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–π–∫–∏ ID –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}")
            if (idCell == null) {
                println("‚ö†Ô∏è –Ø—á–µ–π–∫–∞ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            }

            val idFromCell = try {
                idCell.numericCellValue.toLong()
            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ID –∏–∑ —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}. –ó–Ω–∞—á–µ–Ω–∏–µ: $idCell")
                continue
            }
            println("a6 ID –≤ —è—á–µ–π–∫–µ —Å—Ç—Ä–æ–∫–∏ ${row.rowNum + 1}: $idFromCell")

            if (idFromCell == chatId) {
                userFound = true
                println("a7 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${row.rowNum + 1}. –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                val targetCell = row.getCell(column) ?: row.createCell(column)
                val currentValue = targetCell.numericCellValue.takeIf { it > 0 } ?: 0.0
                println("a8 –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ $column: $currentValue")

                targetCell.setCellValue(currentValue + 1)
                println("a9 –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ $column: ${currentValue + 1}")

                safelySaveWorkbook(workbook, filePath)
                println("a10 –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ $filePath.")
                return
            }
        }
        if (!userFound) {
            println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏
fun processCellContent(cell: Cell?, wordUz: String?): String {
    println("bbb processCellContent // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏")

    println("b1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: cell=$cell, wordUz=$wordUz")
    if (cell == null) {
        println("b2 –Ø—á–µ–π–∫–∞ –ø—É—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.")
        return ""
    }

    val richText = cell.richStringCellValue as XSSFRichTextString
    val text = richText.string
    println("b3 –ò–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏: \"$text\"")

    val runs = richText.numFormattingRuns()
    println("b4 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞: $runs")

    val result = if (runs == 0) {
        println("b5 –ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        processCellWithoutRuns(cell, text, wordUz)
    } else {
        println("b6 –ï—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤.")
        processFormattedRuns(richText, text, wordUz)
    }

    println("b7 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è—á–µ–π–∫–∏: \"$result\"")
    return result
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
fun processCellWithoutRuns(cell: Cell, text: String, wordUz: String?): String {
    println("ccc processCellWithoutRuns // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤")

    println("c1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: cell=$cell, text=$text, wordUz=$wordUz")
    val font = getCellFont(cell)
    println("c2 –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —è—á–µ–π–∫–∏: $font")

    val isRed = font != null && getFontColor(font) == "#FF0000"
    println("c3 –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫—Ä–∞—Å–Ω—ã–π: $isRed")

    val result = if (isRed) {
        println("c4 –í—Å—è —è—á–µ–π–∫–∞ –∏–º–µ–µ—Ç –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç. –ë–ª—é—Ä–∏–º —Ç–µ–∫—Å—Ç.")
        "||${adjustWordUz(text, wordUz).escapeMarkdownV2()}||"
    } else {
        println("c5 –¢–µ–∫—Å—Ç –Ω–µ –∫—Ä–∞—Å–Ω—ã–π. –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        adjustWordUz(text, wordUz).escapeMarkdownV2()
    }

    println("c6 –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: \"$result\"")
    return result
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞
fun processFormattedRuns(richText: XSSFRichTextString, text: String, wordUz: String?): String {
    println("ddd processFormattedRuns // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞")

    println("d1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: richText=$richText, text=$text, wordUz=$wordUz")
    val result = buildString {
        for (i in 0 until richText.numFormattingRuns()) {
            val start = richText.getIndexOfFormattingRun(i)
            val end = if (i + 1 < richText.numFormattingRuns()) richText.getIndexOfFormattingRun(i + 1) else text.length
            val substring = text.substring(start, end)

            val font = richText.getFontOfFormattingRun(i) as? XSSFFont
            val colorHex = font?.let { getFontColor(it) } ?: "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
            println("d2 üé® –¶–≤–µ—Ç —É—á–∞—Å—Ç–∫–∞ $i: $colorHex")

            val adjustedSubstring = adjustWordUz(substring, wordUz)

            if (colorHex == "#FF0000") {
                println("d3 üî¥ –¢–µ–∫—Å—Ç —É—á–∞—Å—Ç–∫–∞ \"$substring\" –∫—Ä–∞—Å–Ω—ã–π. –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é—Ä.")
                append("||${adjustedSubstring.escapeMarkdownV2()}||")
            } else {
                println("d4 –¢–µ–∫—Å—Ç —É—á–∞—Å—Ç–∫–∞ \"$substring\" –Ω–µ –∫—Ä–∞—Å–Ω—ã–π. –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.")
                append(adjustedSubstring.escapeMarkdownV2())
            }
        }
    }
    println("d5 ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤: \"$result\"")
    return result
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏
fun getCellFont(cell: Cell): XSSFFont? {
    println("eee getCellFont // –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏")

    println("e1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: cell=$cell")
    val workbook = cell.sheet.workbook as? org.apache.poi.xssf.usermodel.XSSFWorkbook
    if (workbook == null) {
        println("e2 ‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —à—Ä–∏—Ñ—Ç, workbook –Ω–µ —è–≤–ª—è–µ—Ç—Å—è XSSFWorkbook.")
        return null
    }
    val fontIndex = cell.cellStyle.fontIndexAsInt
    println("e3 –ò–Ω–¥–µ–∫—Å —à—Ä–∏—Ñ—Ç–∞: $fontIndex")

    val font = workbook.getFontAt(fontIndex) as? XSSFFont
    println("e4 –†–µ–∑—É–ª—å—Ç–∞—Ç: font=$font")
    return font
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞
fun getFontColor(font: XSSFFont): String {
    println("fff getFontColor // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞")

    println("f1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: font=$font")
    val xssfColor = font.xssfColor
    if (xssfColor == null) {
        println("f2 ‚ö†Ô∏è –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        return "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
    }

    val rgb = xssfColor.rgb
    val result = if (rgb != null) {
        val colorHex = rgb.joinToString(prefix = "#", separator = "") { "%02X".format(it) }
        println("f3 üé® –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX: $colorHex")
        colorHex
    } else {
        println("f4 ‚ö†Ô∏è RGB –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        "–¶–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
    }

    println("f5 –†–µ–∑—É–ª—å—Ç–∞—Ç: $result")
    return result
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–æ–≤
fun XSSFColor.getRgbWithTint(): ByteArray? {
    println("ggg getRgbWithTint // –ü–æ–ª—É—á–µ–Ω–∏–µ RGB —Ü–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–∞")

    println("g1 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: XSSFColor=$this")
    val baseRgb = rgb
    if (baseRgb == null) {
        println("g2 ‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π RGB –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return null
    }
    println("g3 –ë–∞–∑–æ–≤—ã–π RGB: ${baseRgb.joinToString { "%02X".format(it) }}")

    val tint = this.tint
    val result = if (tint != 0.0) {
        println("g4 –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç—Ç–µ–Ω–æ–∫: $tint")
        baseRgb.map { (it and 0xFF.toByte()) * (1 + tint) }
            .map { it.coerceIn(0.0, 255.0).toInt().toByte() }
            .toByteArray()
    } else {
        println("g5 –û—Ç—Ç–µ–Ω–æ–∫ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")
        baseRgb
    }

    println("g6 –ò—Ç–æ–≥–æ–≤—ã–π RGB —Å —É—á—ë—Ç–æ–º –æ—Ç—Ç–µ–Ω–∫–∞: ${result?.joinToString { "%02X".format(it) }}")
    return result
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–ª–æ–∫–æ–≤
fun initializeUserBlockStates(chatId: Long, filePath: String) {
    println("h1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath")

    val block1Completed = checkUserState(chatId, filePath, block = 1)
    val block2Completed = checkUserState(chatId, filePath, block = 2)
    val block3Completed = checkUserStateBlock3(chatId, filePath) // üî• –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –¥–ª—è –±–ª–æ–∫–∞ 3

    println("h2 –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∞ 1: $block1Completed")
    println("h3 –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∞ 2: $block2Completed")
    println("h4 –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∞ 3: $block3Completed (–ü—Ä–æ–π–¥–µ–Ω–æ –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤: ${getCompletedRanges(chatId, filePath).size}/30)")

    userBlockCompleted[chatId] = Triple(block1Completed, block2Completed, block3Completed)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤
fun updateUserProgressForMiniBlocks(chatId: Long, filePath: String, completedMiniBlocks: List<Int>) {
    println("iii updateUserProgressForMiniBlocks // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–∏–Ω–∏-–±–ª–æ–∫–∞–º")

    println("i1 –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=$chatId, filePath=$filePath, completedMiniBlocks=$completedMiniBlocks")
    val file = File(filePath)
    if (!file.exists()) {
        println("i2 –û—à–∏–±–∫–∞: –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        throw IllegalArgumentException("–§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    }

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if (sheet == null) {
            println("i3 –û—à–∏–±–∫–∞: –õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            throw IllegalArgumentException("–õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        }

        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (row in sheet) {
            val idCell = row.getCell(0)
            val chatIdFromCell = when (idCell?.cellType) {
                CellType.NUMERIC -> idCell.numericCellValue.toLong()
                CellType.STRING -> idCell.stringCellValue.toDoubleOrNull()?.toLong()
                else -> null
            }

            if (chatIdFromCell == chatId) {
                println("i4 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å.")

                // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –æ—Ç L –≤–ø—Ä–∞–≤–æ
                completedMiniBlocks.forEach { miniBlock ->
                    val columnIndex = 11 + miniBlock // L = 11, M = 12 –∏ —Ç.–¥.
                    val cell = row.getCell(columnIndex) ?: row.createCell(columnIndex)
                    val currentValue = cell.numericCellValue.takeIf { it > 0 } ?: 0.0
                    cell.setCellValue(currentValue + 1)
                    println("i5 –ú–∏–Ω–∏-–±–ª–æ–∫ $miniBlock: —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = $currentValue, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = ${currentValue + 1}")
                }

                safelySaveWorkbook(workbook, filePath)
                println("i6 –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId.")
                return
            }
        }

        println("i7 –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å 9 –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤ –∏–∑ sheetColumnPairs
fun sendReplacementsMessage(chatId: Long, bot: Bot) {
    println("### sendReplacementsMessage // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å 9 –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤ –∏–∑ sheetColumnPairs")

    val userPairs = sheetColumnPairs[chatId]

    if (userPairs.isNullOrEmpty()) {
        println("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –≤ sheetColumnPairs –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId.")
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = "–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        )
        return
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    val messageText = userPairs.entries.joinToString("\n") { (key, value) ->
        "$key - $value"
    }

    bot.sendMessage(
        chatId = ChatId.fromId(chatId),
        text = messageText
    )

    println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $chatId:\n$messageText")
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun saveUserProgressBlok3(chatId: Long, filePath: String, range: String) {
    println("üìå saveUserProgressBlok3 // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    val file = File(filePath)
    if (!file.exists()) {
        println("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    }

    // –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Å—Ç–æ–ª–±—Ü–∞–º
    val columnMapping = mapOf(
        "A1-A7" to 1, "B1-B7" to 2, "C1-C7" to 3, "D1-D7" to 4, "E1-E7" to 5, "F1-F7" to 6,
        "A8-A14" to 7, "B8-B14" to 8, "C8-C14" to 9, "D8-D14" to 10, "E8-E14" to 11, "F8-F14" to 12,
        "A15-A21" to 13, "B15-B21" to 14, "C15-C21" to 15, "D15-D21" to 16, "E15-E21" to 17, "F15-F21" to 18,
        "A22-A28" to 19, "B22-B28" to 20, "C22-C28" to 21, "D22-D28" to 22, "E22-E28" to 23, "F22-F28" to 24,
        "A29-A35" to 25, "B29-B35" to 26, "C29-C35" to 27, "D29-D35" to 28, "E29-E35" to 29, "F29-F35" to 30
    )

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –∫–æ–ª–æ–Ω–∫—É –ø–∏—Å–∞—Ç—å
    val columnIndex = columnMapping[range]
    if (columnIndex == null) {
        println("‚ùå –û—à–∏–±–∫–∞: –î–∏–∞–ø–∞–∑–æ–Ω $range –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ä—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.")
        return
    }
    println("‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω $range -> –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É $columnIndex")

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫") ?: workbook.createSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫")

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–∏–¥—ë–º –≤–ø—Ä–∞–≤–æ)
        val headerRow = sheet.getRow(0) ?: sheet.createRow(0)
        var userColumnIndex = -1

        for (col in 0 until 31) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 30 —Å—Ç–æ–ª–±—Ü–∞
            val cell = headerRow.getCell(col) ?: headerRow.createCell(col)
            if (cell.cellType == CellType.NUMERIC && cell.numericCellValue.toLong() == chatId) {
                userColumnIndex = col
                break
            } else if (cell.cellType == CellType.BLANK) {  // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—É—Å—Ç–æ–π, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º ID
                cell.setCellValue(chatId.toDouble())
                userColumnIndex = col
                break
            }
        }

        if (userColumnIndex == -1) {
            println("‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ ID!")
            return
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –±–∞–ª–ª–∞ (–ø–æ –∏–Ω–¥–µ–∫—Å—É —Å—Ç–æ–ª–±—Ü–∞)
        val row = sheet.getRow(columnIndex) ?: sheet.createRow(columnIndex)
        val cell = row.getCell(userColumnIndex) ?: row.createCell(userColumnIndex)

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª –Ω–∞ 1
        val currentScore = cell.numericCellValue.takeIf { it > 0 } ?: 0.0
        cell.setCellValue(currentScore + 1)

        println("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω: chatId=$chatId, —Å—Ç–æ–ª–±–µ—Ü=$userColumnIndex, —Å—Ç—Ä–æ–∫–∞=$columnIndex, –Ω–æ–≤—ã–π –±–∞–ª–ª=${currentScore + 1}")

        safelySaveWorkbook(workbook, filePath)
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤
fun getCompletedRanges(chatId: Long, filePath: String): Set<String> {
    println("üìä getCompletedRanges // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤")

    val completedRanges = mutableSetOf<String>()
    val file = File(filePath)
    if (!file.exists()) {
        println("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return emptySet()
    }

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫") ?: return emptySet()
        val headerRow = sheet.getRow(0) ?: return emptySet()

        var userColumnIndex: Int? = null
        for (col in 0 until 31) {
            val cell = headerRow.getCell(col)
            if (cell != null && cell.cellType == CellType.NUMERIC && cell.numericCellValue.toLong() == chatId) {
                userColumnIndex = col
                break
            }
        }

        if (userColumnIndex == null) {
            println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
            return emptySet()
        }

        val rangeMapping = listOf(
            "A1-A7", "B1-B7", "C1-C7", "D1-D7", "E1-E7", "F1-F7",
            "A8-A14", "B8-B14", "C8-C14", "D8-D14", "E8-E14", "F8-F14",
            "A15-A21", "B15-B21", "C15-C21", "D15-D21", "E15-E21", "F15-F21",
            "A22-A28", "B22-B28", "C22-C28", "D22-D28", "E22-E28", "F22-F28",
            "A29-A35", "B29-B35", "C29-C35", "D29-D35", "E29-E35", "F29-F35"
        )

        for ((index, range) in rangeMapping.withIndex()) {
            val row = sheet.getRow(index + 1) ?: continue
            val cell = row.getCell(userColumnIndex)
            val value = cell?.numericCellValue ?: 0.0
            if (value > 0) {
                completedRanges.add(range)
            }
        }
    }

    println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: $completedRanges")
    return completedRanges
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
fun checkBlocksBeforeTest(chatId: Long, bot: Bot, filePath: String) {
    println("üö¶ checkBlocksBeforeTest // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º")

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –±–ª–æ–∫–∞–º
    initializeUserBlockStates(chatId, filePath)
    val (block1Completed, block2Completed, block3Completed) = userBlockCompleted[chatId] ?: Triple(false, false, false)

    println("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId:")
    println("‚úÖ –ë–ª–æ–∫ 1: $block1Completed")
    println("‚úÖ –ë–ª–æ–∫ 2: $block2Completed")
    println("‚úÖ –ë–ª–æ–∫ 3: $block3Completed")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω—ã –ª–∏ –≤—Å–µ –±–ª–æ–∫–∏
    if (block1Completed && block2Completed && block3Completed) {
        println("‚úÖ –í—Å–µ –±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç.")
        handleBlockTest(chatId, bot)
    } else {
        val notCompletedBlocks = mutableListOf<String>()
        if (!block1Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 1")
        if (!block2Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 2")
        if (!block3Completed) notCompletedBlocks.add("–ë–ª–æ–∫ 3")

        val messageText = "–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:\n" + notCompletedBlocks.joinToString("\n") +
                "\n–ü—Ä–æ–π–¥–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º."

        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = messageText,
            replyMarkup = InlineKeyboardMarkup.createSingleRowKeyboard(
                InlineKeyboardButton.CallbackData("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º", "main_menu")
            )
        )
        println("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∞—Ö: $notCompletedBlocks")
    }
}

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–ª–æ–∫–µ 3
fun checkUserStateBlock3(chatId: Long, filePath: String): Boolean {
    println("üõ† –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–ª–æ–∫–µ 3")

    val file = File(filePath)
    if (!file.exists()) {
        println("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $filePath")
        return false
    }

    WorkbookFactory.create(file).use { workbook ->
        val sheet = workbook.getSheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫")
        if (sheet == null) {
            println("‚ùå –õ–∏—Å—Ç '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3 –±–ª–æ–∫' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return false
        }

        val headerRow = sheet.getRow(0) ?: return false

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var userColumnIndex: Int? = null
        for (col in 0..30) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫–∏ –æ—Ç 2 –ø–æ 31
            val cell = headerRow.getCell(col)
            if (cell != null && cell.cellType == CellType.NUMERIC && cell.numericCellValue.toLong() == chatId) {
                userColumnIndex = col
                break
            }
        }

        if (userColumnIndex == null) {
            println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
            return false
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–ª–ª—ã –≤–æ –í–°–ï–• 30 –º–∏–Ω–∏-–±–ª–æ–∫–∞—Ö
        for (rowIdx in 1..30) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ 2-31 (—Ç.–∫. –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0)
            val row = sheet.getRow(rowIdx) ?: return false
            val cell = row.getCell(userColumnIndex)
            val value = cell?.numericCellValue ?: 0.0
            if (value == 0.0) {
                println("‚ùå –ú–∏–Ω–∏-–±–ª–æ–∫ $rowIdx –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return false
            }
        }

        println("‚úÖ –í—Å–µ 30 –º–∏–Ω–∏-–±–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return true
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fun initializeSheetColumnPairsFromFile(chatId: Long) {
    println("### initializeSheetColumnPairsFromFile // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId")

    sheetColumnPairs[chatId] = mutableMapOf()  // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    val file = File(tableFile)
    if (!file.exists()) {
        println("‚ùå –§–∞–π–ª $tableFile –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    }

    val workbook = WorkbookFactory.create(file)
    val sheetNames = listOf("–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ", "–ì–ª–∞–≥–æ–ª—ã", "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ")
    val userPairs = mutableMapOf<String, String>()  // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä

    for (sheetName in sheetNames) {
        val sheet = workbook.getSheet(sheetName)
        if (sheet == null) {
            println("‚ö†Ô∏è –õ–∏—Å—Ç $sheetName –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            continue  // ‚úÖ –ü—Ä–æ—Å—Ç–æ continue, –±–µ–∑ run {}
        }

        val candidates = mutableListOf<Pair<String, String>>() // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –≤—ã–±–æ—Ä–∫—É

        for (i in 0..sheet.lastRowNum) {
            val row = sheet.getRow(i) ?: continue
            val key = row.getCell(0)?.toString()?.trim() ?: ""
            val value = row.getCell(1)?.toString()?.trim() ?: ""
            if (key.isNotEmpty() && value.isNotEmpty()) {
                candidates.add(key to value)
            }
        }

        if (candidates.size < 3) {
            println("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ $sheetName –¥–ª—è –≤—ã–±–æ—Ä–∞ 3 –ø–∞—Ä.")
            continue
        }

        val selectedPairs = candidates.shuffled().take(3)  // –ë–µ—Ä–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã
        for ((key, value) in selectedPairs) {
            userPairs[key] = value
        }
    }

    workbook.close()

    if (userPairs.size == 9) {
        sheetColumnPairs[chatId] = userPairs  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã –≤ –æ–±—â–∏–π –º–∞–ø
        println("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã 9 –ø–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $chatId: $userPairs")
    } else {
        println("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω–æ ${userPairs.size} –ø–∞—Ä –≤–º–µ—Å—Ç–æ 9.")
    }
    generateReplacements(chatId)
}